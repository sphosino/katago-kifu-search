#packopt name "KataGo棋譜検索"
#packopt hide 1
#bootopt notimer 1 //ツールなので、高精度タイマーを使用しない

;#addition "WrapCall.as" ;knowbugが使うコールスタック監査、重くなるので謎バグ特定専用

#include "basic.hsp" //hsp_commonから利用するファイルを列挙

#include "modules/grid_system/area_grid_system.hsp"

#include "modules/sgf.hsp"
#include "modules/katago_sqr.hsp"

#include "modules/search/pattern.hsp"
#include "modules/search/Search_pattern.hsp"
#include "modules/search/Search_pattern2.hsp"
#include "modules/search/draw_pattern.hsp"

#include "tooltip.hsp"

#include "go_game_manager.hsp"

#include "hspext.as"
#include "user32.as"

#define window_file_name "window.txt"
#const INACTIVITY_TIMEOUT 1800
#const MODE_KIFU_VIEW 0
#const MODE_BOARD_EDIT 1


#const BG_COLOR $808080 // 128,128,128

#ifdef _debug
	dirname = "C:\\Users\\owner\\Desktop\\katago-kifu-search"
#else
	dirname = dir_exe
#endif

//前回起動時の情報があれば復元
chdir dirname
exist window_file_name

if strsize == -1{
	x = 1140
	y = 855
	sx = x
	sy = y
	wx = (ginfo(20) - x) / 2
	wy = (ginfo(21) - y) / 2
	//探索の最大深さ
	max_depth = 70
	
	//色反転を含めるか
	enableColorFlip = 1
	
	//星を表示するか
	view_hosi = 0

	//最終手表示
	last_move_mark = 1
	
	//棋譜を何手目から表示するか
	kifu_start_num = 10

	//１回の検索でどれぐらい読み込むか（％）
	loadmax = 10

	//棋譜再生速度(ms)
	auto_interval = 1000
	alpha_interval = 10000
	m_interval = 10000
	
}else{
	notesel s
	chdir dirname
	noteload window_file_name
	noteget_start
	noteget_ x
	noteget_ y
	noteget_ wx
	noteget_ wy
	noteget_ sx
	noteget_ sy
	noteget_ max_depth
	noteget_ enableColorFlip
	noteget_ view_hosi
	noteget_ last_move_mark
	noteget_ kifu_start_num
	noteget_ loadmax
	noteget_ auto_interval
	noteget_ alpha_interval
	noteget_ m_interval
	noteget_ 最小化
	noteget_ 最大化

	if wx < 0{
		wx = (ginfo(20) - x) / 2
		wy = (ginfo(21) - y) / 2
	}

	noteunsel
}

#module
#deffunc noteget_start
	tmp = 0
	return
#deffunc noteget_ var a
	noteget a, tmp
	a = int(a)
	tmp++
	return
#global

//ウィンドウ作成
screen 0, ginfo(20), ginfo(21),, wx, wy, sx, sy

GetWindowLong hwnd, -16
SetWindowLong hwnd, -16, stat | $10000 | $40000

dim save_window_size, 2
dim save_window_position, 2
if ginfo(12) >= 0: save_window_size = ginfo(12), ginfo(13)
if ginfo(4) >= 0: save_window_position = ginfo(4), ginfo(5)
if 最大化: sendmsg hwnd, $112, $F030
if 最小化: sendmsg hwnd, $112, $F020

boxf
color 255, 255, 255

tmp = 0, 0, sx, sy
set_max_centering_mes 40
centering_mes "システム起動中・・・", tmp, "メイリオ"


//初期化開始


kifu_dirname = dirname + "/棋譜"
v = "" //検索対象座標セット　xxyy,xxyy... 形式
search_result_sgflist = ""
jidou = 0
着手番号表示 = 0
ui_mode = MODE_KIFU_VIEW
set_treeview 37, 37
set_treeview_position 10,20
set_tree_direction 6

kifu_update = 1

topnode = -1

//-- ゲーム状態の管理用変数 ---
c_list = "0.50" ; 形勢（評価値）データ（KataGoコメントから）
dim pre_xy, 2   ; 前の座標を保持（マンハッタン距離用)
dim user_board, 19, 19 ;　プレイヤーが操作する仮盤面

pre_window_size = -9999,-9999
pre_ui_mode = -1

//矩形範囲指定用
rn = 0
dim rect, 4
dim rect_stack, 4

//検索結果受け取り用
sdim search_result,, 2, 10000; [0]=SGFファイル名, [1]=SGFノードID
sdim search_result_sgflist　 ; 改行区切りでファイル名だけを保持
dim matchlist                ; 検索結果用リストボックスIDを格納

pre_filter_on = -1
pre_filter = -1

//FPS設定
setfps 30 //目標FPSセット(初期値)
enable_auto_adjust //目標FPS自動調整有効化

//使用キーの宣言
delkey_all
addkey 1 //左クリック
addkey 2 //右クリック
addkey 17 //ctrl
addkey 'C'
addkey 'V'
addkey 'A'

repeat 4
	addkey 37+cnt //カーソルキー
loop

//乱数を初期化
randomize

//saveフォルダを空にする
chdir dirname + "/save"
dirlist filelist, "*.sgf"
notesel filelist
	repeat notemax
		noteget tmp, cnt
		delete tmp
	loop
noteunsel

//エリア作成
root = make_area_child(1,1)
	
	body_area = make_area_child(3,1, root)
		sidebar_area = make_area_child(1,2,body_area)
		sidebar_buttons = make_area_child(2,3,sidebar_area)
		sidebar_kifu_area = make_area_child(1,2)
			sidebar_kifulist_area = make_area_child(2,,sidebar_kifu_area)
			
			sidebar_kifulist_buttons = make_area_child(2,2)

				sidebar_kifulist1 = make_area_child(,3,sidebar_kifulist_area)
				sidebar_kifulist2 = make_area_child(,3,sidebar_kifulist_area)

					sidebar_kifulist_label1 = make_area_child(,,sidebar_kifulist1)
					sidebar_kifulist = make_area_child()
					kifustart = make_area_child()

					sidebar_kifulist_label2 = make_area_child(,,sidebar_kifulist2)
					sidebar_kifulist_match = make_area_child()
					kifustart_result = make_area_child()
					
				sidebar_kifulist_match_back = make_area_child(,,sidebar_kifulist_buttons)
				sidebar_kifulist_match_next = make_area_child()
				chkbox_autoplay = make_area_child()
				slider = make_area_child()

			chkbox_last_move = make_area_child(,,sidebar_buttons)
			chkbox_view_hosi = make_area_child()
			button_getsgf = make_area_child()
			button_getsgf_nowpoint = make_area_child()
			button_download_file = make_area_child()
			button_save_file = make_area_child()
			
		goban_area = make_area_child(1,2,body_area)
				goban_body_area = make_area_child(,,goban_area)
				goban_footer = make_area_child(7,,goban_area)
					back_top = make_area_child(,,goban_footer)
					back_one = make_area_child()
					back_ten = make_area_child()
					go_ten = make_area_child()
					go_one = make_area_child()
					go_end = make_area_child()
					button_clearboard = make_area_child()
					
		goban_tool_area = make_area_child(1,7,body_area)
			goban_graph_area = make_area_child(1,2,goban_tool_area)
				treebox_area = make_area_child(,,goban_graph_area)
				line_graph_area = make_area_child()
			
			goban_loadmax_area = make_area_child(,,goban_tool_area)
			combox_history = make_area_child(,,goban_tool_area)

			goban_search_area = make_area_child(3,2,goban_tool_area)
				button_search = make_area_child(,,goban_search_area)
				button_exclude_search = make_area_child()
				button_narrow_down_search = make_area_child()
				chkbox_colorflip = make_area_child()
				chkbox_use_bitboard = make_area_child()
				chkbox_inverse = make_area_child()
			goban_filter_area = make_area_child(1,2,goban_tool_area)
				goban_filter_area_header = make_area_child(,,goban_filter_area)
					chkbox_filter = make_area_child(,,goban_filter_area_header)
				goban_filter_area_body   = make_area_child(2,,goban_filter_area)
					combox_modelname = make_area_child(,,goban_filter_area_body)
			tejun_area = make_area_child(1,2,goban_tool_area)
				tejun_sub = make_area_child(2,1,tejun_area)
					button_tejun_clear = make_area_child(,,tejun_sub)
					chkbox_inc = make_area_child()
				radiobox_tejun = make_area_child(,,tejun_area)
			
			goban_edit_area = make_area_child(2,1, goban_tool_area)
				goban_edit_stone = make_area_child(1,2,goban_edit_area)
					chkbox_tyakusyu = make_area_child(,,goban_edit_stone)
					radiobox_goban_edit = make_area_child()
				goban_edit_group = make_area_child(1,2,goban_edit_area)
					button_group_clear = make_area_child(,,goban_edit_group)
					radiobox_grouping = make_area_child()

//グリッド情報をロード（エリアを作成してからでないと復元できない）
chdir dirname
exist "area.var" 
if strsize >= 0{
	save_load_manager_load
}

//各エリアの設定
set_grid_area_back_color sidebar_kifulist_area, $333333
set_grid_area_back_color goban_search_area,$333333
set_grid_area_back_color goban_edit_stone,$333333
set_grid_area_back_color goban_edit_group,$333333
set_grid_area_back_color goban_footer,$333333
set_grid_area_back_color treebox_area ,$333333
set_grid_area_back_color goban_filter_area , $333333
set_grid_area_back_color tejun_area, $333333

set_padding sidebar_kifulist1, 0,0,0,0
set_padding sidebar_kifulist2, 0,0,0,0
set_margin sidebar_kifulist1, 0,5
set_margin sidebar_kifulist2, 0,5

add_tooltip goban_loadmax_area, "検索時追加で読み込む量"
add_tooltip combox_history, "検索パターン履歴"
add_tooltip button_getsgf, "選択中の棋譜をSGF形式でクリップボードにコピー"
add_tooltip button_getsgf_nowpoint, "現局面をSGF形式でクリップボードにコピー"
add_tooltip kifustart, "何手目から表示するかを設定"
add_tooltip kifustart_result, "マッチした局面から前後何手目を表示するかを設定"
add_tooltip combox_modelname, "対局者名（モデル名）でフィルタ"

set_tooltip_color 0x333333, 0xFFFFFF

//実体作成
newmod g_buttons, grid_button, "最新棋譜取得", *loadfile, button_download_file
newmod g_buttons, grid_button, "保存",*save_file,button_save_file
newmod g_buttons, grid_button, "SGF取得"   , *getsgf  , button_getsgf
newmod g_buttons, grid_button, "SGF取得\n(現局面)", *getsgf_nowpoint, button_getsgf_nowpoint
newmod g_buttons, grid_button, "クリア"  , *clearboard, button_clearboard
newmod g_buttons, grid_button, "検索"          , *create_pattern, button_search
newmod g_buttons, grid_button, "除外検索"      , *create_pattern2, button_exclude_search
newmod g_buttons, grid_button, "絞込検索"  , *create_pattern3, button_narrow_down_search
newmod g_buttons, grid_button, "次の棋譜"  , *next_kifu, sidebar_kifulist_match_next
newmod g_buttons, grid_button, "前の棋譜"  , *back_kifu, sidebar_kifulist_match_back
newmod g_buttons, grid_button, "|<",*to_sgftop, back_top
newmod g_buttons, grid_button, "<<", *back10, back_ten
newmod g_buttons, grid_button, "<", *move_back, back_one
newmod g_buttons, grid_button, ">", *move_next, go_one
newmod g_buttons, grid_button, ">>", *go10, go_ten
newmod g_buttons, grid_button, ">|",*to_sgfend,go_end
newmod g_buttons, grid_button, "石グループ解除",*group_clear, button_group_clear
newmod g_buttons, grid_button, "手順解除",*tejun_clear, button_tejun_clear

newmod g_chkbox, grid_checkbox, ui_mode           , "編集モード" , chkbox_tyakusyu: mode_chkbox = stat
newmod g_chkbox, grid_checkbox, enableColorFlip,"色反転含む", chkbox_colorflip: colorflip_chkbox = stat
newmod g_chkbox, grid_checkbox, jidou          ,"自動再生",chkbox_autoplay
newmod g_chkbox, grid_checkbox, view_hosi,"星表示", chkbox_view_hosi
newmod g_chkbox, grid_checkbox, last_move_mark,"最終手表示",chkbox_last_move
newmod g_chkbox, grid_checkbox, use_bitboard, "厳密検索", chkbox_use_bitboard
newmod g_chkbox, grid_checkbox, inverse, "反転検索",chkbox_inverse
newmod g_chkbox, grid_checkbox, filter_on, "検索結果にフィルターを適用", chkbox_filter
newmod g_chkbox, grid_checkbox, inc_tejun, "自動で次の番号へ", chkbox_inc: set_g_checkbox g_chkbox.stat, 1

newmod g_label, grid_label,"棋譜リスト",sidebar_kifulist_label1, $F5F5DC,$333333
newmod g_label, grid_label,"検索結果(0)件",sidebar_kifulist_label2,$F5F5DC,$333333

newmod g_stepper, grid_stepper, kifu_start_num, kifustart: set_stepper_limit g_stepper(stat), 0
newmod g_stepper, grid_stepper, kifu_start_num_result, kifustart_result: set_stepper_limit g_stepper(stat), -50

newmod g_slider, grid_slider, auto_interval , 1, slider, 100, 10000, 14 , 16
newmod g_slider, grid_slider, alpha_interval, 1, slider, 0  , 10000, 14 , 16, , 25
newmod g_slider, grid_slider, m_interval    , 1, slider, 0  , 10000, 14 , 16, , 50
newmod g_slider, grid_slider, loadmax, 1, goban_loadmax_area, 0, 100, 14 , 16

model_list = "all\nb28\nb18\nb60\nb40"
newmod g_combox, grid_combox, modelname, model_list, combox_modelname
newmod g_combox, grid_combox, history_num, "history", combox_history: combox_history_obj = stat

newmod g_radiobox, grid_radiobox, g_edit, radiobox_goban_edit
add_item_radiobox g_radiobox, "●"
add_item_radiobox g_radiobox, "〇"
add_item_radiobox g_radiobox, "●〇"
add_item_radiobox g_radiobox, "×"
g_edit = 2

newmod g_radiobox, grid_radiobox, g_group, radiobox_grouping : tmp = stat
add_item_radiobox g_radiobox.tmp, "A"
add_item_radiobox g_radiobox.tmp, "B"
add_item_radiobox g_radiobox.tmp, "C"
add_item_radiobox g_radiobox.tmp, "D"

newmod g_radiobox, grid_radiobox, te, radiobox_tejun: tmp = stat

repeat 9
add_item_radiobox g_radiobox.tmp, str(cnt+1)
loop

newmod kifulist, grid_listbox, sidebar_kifulist, 26000
newmod kifulist, grid_listbox, sidebar_kifulist_match, 26000: matchlist = stat
foreach kifulist
	set_listbox_item_ysize kifulist.cnt, 25
	set_listbox_scollbar_width kifulist.cnt, 16
loop

newmod board, goban, 19,19,26,26, goban_body_area:set_goban_margin board.stat,20
newmod board, goban, 19,19,26,26, goban_body_area:set_goban_margin board.stat,20

newmod t, treebox,treebox_area

newmod l_graph, line_graph, line_graph_area
set_margin_line_graph l_graph, 27, 18, 13, 18

newmod filename_to_topnode, hash_manager, 26000

foreach g_label
	set_g_label_r g_label.cnt , 5, 4 | 8
loop
gosub*load_kifu_folder
gosub*loadsgf

set_max_centering_mes 33

bg_id = make_draw_object(MOVE_TYPE_STATIC, "BOXF_FAST", LIFE_FOREVER, 0,0, ginfo(12), ginfo(13), strf("%d",BG_COLOR))
update_priority_draw_object bg_id, PRIORITY_BACK
//最初の時刻
pretime = keyfpstime

onexit *save_info //終了時に*save_infoにジャンプ

*main
	計測 "manage_keyfps"
	manage_keyfps
	notify_dt_draw_object frametime()

	計測 "kifuload"

	if kifu_update & waitedtime() > get_target_wait(){//棋譜がアップデートされたとき且つ、十分な余裕時間があったときのみ走る
		new_ = get_in_area()
		//マウスがエリア間を移動したか、プログラム上で左クリックされているか
		if (pre_ != new_) || ((_getkey(1) >= 1) && (ginfo_act != -1)){
			pat = keyfpstime
			pre_ = new_
		}
		//ユーザーがアクティブでない時
		if keyfpstime - pat >= INACTIVITY_TIMEOUT{
			
			//毎フレーム１棋譜読み込む
			
			notesel filelist
				
				noteget sgf_file_name, get_entry_count(filename_to_topnode)
				if sgf_file_name == ""{
					//全て読み込んだ
					kifu_update = 0
				}else{
					if get_value(filename_to_topnode, sgf_file_name) == NOT_DEFINED_HASH{
						notesel sgf
							chdir kifu_dirname
							noteload sgf_file_name
							new_value filename_to_topnode, sgf_file_name, str(load_sgf(sgf)) //ファイル名とトップノードの番号を紐づける
						noteunsel
					}
				}
			noteunsel
		}
	}
	
	計測 "前フレームからの状態変化取得"
	if pre_kifu_update != kifu_update{
		pre_kifu_update = kifu_update
	}

	
	if now_area != get_in_area() || _getkey(1) >= 1{
		now_area = get_in_area()
		set_tooltip now_area
		count = 0.
	}else{
		count+= frametime()
		if count >= 0.500: draw_tooltip now_area
	}
	if combox_selected_flag(g_combox(combox_history_obj)){
		logmes "selected => " + history_num
		rect = -1
		load_search_history history_num
		set_g_checkbox g_chkbox.mode_chkbox,  MODE_BOARD_EDIT
	}
	window_size = ginfo(12), ginfo(13)
	if pre_window_size != window_size || pre_window_size.1 != window_size.1{
		pre_window_size = window_size, window_size.1
		gosub *save_window_size_main
		if 最小化 == 0{
			set_static_sizex get_entity_id(bg_id), ginfo(12)
			set_static_sizey get_entity_id(bg_id), ginfo(13)
		}
	}
	if 最小化:goto*main

	repeat 2
		set_最終手表示 board.cnt, last_move_mark
		set_星表示 board.cnt,view_hosi
	loop
	
	if pre_ui_mode != ui_mode {
		pre_ui_mode = ui_mode

		if ui_mode = MODE_KIFU_VIEW{
			init_group
			init_tejun
		}else{
			get_board_data board  , user_board
			set_board_data board.1, user_board
			swapturn = 手数 + 1 & 1 //編集手番を現局面の次の手番にセット
		}
	}
	if filter_on{
		if pre_filter != get_value_g_combox(g_combox) || pre_filter_on != filter_on{
			pre_filter = stat
			pre_filter_on = filter_on
			gosub *filtering_and_make_listbox
		}
	}
	
	計測 "入力処理"
	
	nownode = get_current_node(t)
	getBoardCoordinates board, point

	in_board = 0
	if 0 <= point && point < 19{
		if 0 <= point.1 && point.1 < 19{
			in_board = 1
		}
	}
	if debugmode == 0{
		//マウス操作
		if _getkey(2) == 1{ //右クリック

			if dragging_flag == 1{
				if rect >= 0{
					modify_coordinates_by_rect v, rect(0), rect(1), rect(2), rect(3), 1
				}
				dragging_flag = 0
			}else{
				if treebox_onmouseid(t) >= 0{
					set_current_node t, treebox_onmouseid(t)
					Treebox_toggle_openflag t, treebox_onmouseid(t)
				}
				if ui_mode == MODE_BOARD_EDIT{//編集モード
					if in_board{
						if treebox_onmouseid(t) < 0{
							if in_board{
								user_board(point,point.1) = (user_board(point,point.1)  + 1) \ 6
								set_board_data board.1, user_board
								if user_board(point,point.1) == 0{
									repeat 4
										del_group point, point.1, cnt
									loop
									repeat 9
										del_tejun point, point.1, cnt
									loop
								}
							}
						}
					}
				}
			}
		}

		//右長押しで、指定された範囲を除外
		if gethold_ms(2, 300, 400){
			if rn{
				rn--
				modify_coordinates_by_rect v, rect_stack(0,rn), rect_stack(1,rn), rect_stack(2,rn), rect_stack(3,rn), 1
				dragging_flag = 0
			}
		}
		
		if _getkey(1) == 1{ //左クリック
			if in_board == 0{
				spawn_ripple_effect mousex, mousey
				update_priority_draw_object stat, PRIORITY_FRONT
				if treebox_onmouseid(t) >=0{
					set_current_node t, stat
					sync_treebox_board t, board
					手数 = treeview_onmouse_id_deep()
					gosub*syncboard
				}
			}else{
				dragging_flag = 1
				if in_board{
					get_board_data board , tmp
					get_board_data board.1, m
					if (ui_mode == MODE_KIFU_VIEW & (g_group == -1 || tmp(point,point.1) == 0)) || (ui_mode != MODE_KIFU_VIEW && g_edit == -1 && m(point, point.1) == 0){
						rect = limit(point,0,18),limit(point.1,0,18)
						rect(2) = rect, rect.1
					}
				}

			}
			
			inlistbox = 0
			foreach kifulist
				sel = listbox_on_id(kifulist.cnt, mousex, mousey)
				if sel != -1: inlistbox = 1 //リストボックスのなかだ。
				if sel >= 0{
					if select_kifulist_item(sel, cnt): break
				}
			loop
		}

		//キーによるドラッグ解除処理（先）
		if _getkey(1) == -1{//マウスが離されたとき
				
			dragging_flag = 0
			if rect(0) >= 0{
				modify_coordinates_by_rect v, rect(0), rect(1), rect(2), rect(3)
				rect_stack(0,rn) = rect(0), rect(1), rect(2), rect(3)
				rn++
				dim rect,4
			}
		}

		//ドラッグ中の処理(後）
		if dragging_flag{
			
			rect(2) = limit(point(0),0,18)
			rect(3) = limit(point(1),0,18)

			if in_board {
				switch g_edit

				swbreak
				case 0
					user_board(point,point.1) = 1
					set_board_data board.1, user_board
				swbreak
				case 1
					user_board(point,point.1) = 2
					set_board_data board.1, user_board
				swbreak
				case 2
					if prex == point.0 & prey == point.1{
					}else{
						prex = point.0
						prey = point.1
						swapturn^1
						user_board(point,point.1) = swapturn + 1
						set_board_data board.1, user_board
					}
				swbreak
				case 3
					user_board(point,point.1) = 0
					set_board_data board.1, user_board
					repeat 4
						del_group point, point.1, cnt
					loop
					repeat 9
						del_tejun point, point.1, cnt
					loop
				swbreak

				swend

				if g_group >= 0{

					if rect == -1{
						if ui_mode == MODE_KIFU_VIEW{
							get_board_data board  , tmp
							OK = tmp(point,point.1)
						}else{
							OK = user_board(point,point.1)
						}
						if OK{
							add_group point, point.1, g_group
						}
					}
				}
							//手順
				if _getkey(1) == 1{
					if te >= 0{
						get_board_data board(ui_mode), m
						if m(point(0),point(1)){
							repeat 9
								del_tejun point(0),point(1), cnt
							loop
							add_tejun point(0),point(1), te
							if inc_tejun{
								te = (te + 1) \ 9
							}
						}
					}
				}
			}
		}else{
			rect = -1
		}

	
		//マウスホイール
		mw = mousew
	
		in_kifulist = 0
		
		foreach kifulist
			if listbox_on_id(kifulist.cnt,mousex, mousey) >= 0{
				in_kifulist++
				if mw < 0: scroll_down   kifulist.cnt
				if mw > 0: scroll_up     kifulist.cnt
			}
		loop
		
		if (in_kifulist == 0) && (ui_mode == MODE_KIFU_VIEW){
			if mw < 0 : gosub*move_next
			if mw > 0 : gosub*move_back
		}
	
		//キー操作
		if _getkey(17) >= 1{ //CTRL
			if _getkey('C') == 1 { //CTRL + C
				gosub*getsgf
			}
			if _getkey('V') == 1 { //CTRL + V
				gosub*loadsgf
			}
		}
		
		//自動再生
		計測 "自動再生"

		//-------------------基本wait +  エンジンの形勢判断によるwait + 直前の手とのマンハッタン距離によるwait
		if jidou & (ui_mode == MODE_KIFU_VIEW){
			
			if pre_jidou == 0{
				前の形勢 = double(c_list)
				pre_jidou = 1
			}

			logmes strf("%d,%d", auto_interval + (形勢の変化率 * alpha_interval) + (m_interval * マンハッタン距離 / 36), keyfpstime - pretime)
			if keyfpstime - pretime >= auto_interval + (形勢の変化率 * alpha_interval) + (m_interval * マンハッタン距離 / 36){
				pretime = keyfpstime
				logmes "moved"
				gosub *move_next
				
				
				今の形勢 = double(c_list)
				形勢の変化率 = absf(今の形勢 - 前の形勢)
				前の形勢 = 今の形勢
			}
		}else{
			pre_jidou = 0
			if ginfo_act == -1{
				skipdraw = 1
				skipcount++
			}
		}
	}
	
	//CTRLダブルクリックでデバッグモード切替
	if getdbl_ms(17, 250) == 1{
		debugmode ^ 1
		logmes "switched debugmode ->" +debugmode
	}


	計測 "object_managers"

	//碁盤エリアの背景に形勢を反映(局面をユーザーが進めると動的に変わる）
	a = double(c_list) * 255
	
	get_rect goban_area, goban_back_rect
	make_instant_draw_object "BOXF", (goban_back_rect + goban_back_rect.2) / 2, (goban_back_rect.1 + goban_back_rect.3) / 2, goban_back_rect.2-goban_back_rect,goban_back_rect.3-goban_back_rect.1, strf("$%02X%02X%02X",a,a,a)
	update_priority_draw_object stat, PRIORITY_BACK
	碁盤表示 board.ui_mode
	

	//エリア矩形表示
	draw_all_rect root, debugmode

	//グループ表示
	get_group tmp
	get_tejun tmp2
	group_tejun_draw board.ui_mode, tmp, tmp2
	
	//検索範囲表示

	draw_set_list_on_board board.ui_mode, v
	
	//各アイテム登録
	all_items_draw

	新しい手数 = 手数
	line_graph_manager l_graph, 新しい手数
	if 新しい手数 - 手数: move_next_int 新しい手数 - 手数

	if dragging_flag && rect >= 0{
		碁盤に矩形データを表示 board.ui_mode, rect
	}

	treebox_draw t, length(f)

	
	計測 "レンダラ"
	draw_objects //レンダラ経由描画

	計測描画　//計測結果描画

	redraw
	redraw 2
	goto*main
	
#deffunc all_items_draw

	foreach kifulist
		listbox_manager kifulist.cnt, current_kifulist = cnt
	loop
	foreach g_label
		draw_g_label g_label.cnt
	loop
	font "メイリオ", 29
	foreach g_chkbox
		draw_g_chkbox g_chkbox.cnt
	loop
	foreach g_buttons
		draw_g_button g_buttons.cnt
	loop
	foreach g_slider
		slider_manager g_slider.cnt
	loop
	foreach g_stepper
		draw_g_stepper g_stepper.cnt
	loop
	foreach g_radiobox
		draw_g_radiobox g_radiobox.cnt
	loop
	foreach g_combox
		combox_manager g_combox.cnt
	loop
	return



*save_window_size_main
	await
	IsZoomed hwnd :最大化 = stat
	IsIconic hwnd :最小化 = stat
	if (最大化 | 最小化) == 0{
		save_window_size = window_size, window_size.1
		save_window_position = ginfo(4), ginfo(5)
	}
	return
	
#defcfunc select_kifulist_item int itemid, int kifulist_id, int flag_next_or_back

	if itemid >= 0 && itemid < get_list_item_num(kifulist.kifulist_id){

		current_kifulist = kifulist_id
		ui_mode = MODE_KIFU_VIEW
		if get_root_tree_node(t) >= 0{
			del_treenode(get_root_tree_node(t))
		}
		set_treeview_scroll
		//範囲指定を初期化
		sdim v
		rn = 0


		topnode = change_sgf(get_item_name(kifulist.kifulist_id, itemid), t, board, filename_to_topnode)

		clear_graph l_graph

		get_nodelist int(get_property_data(topnode,"MN")), f
		set_end_xy l_graph, length(f), 100

		for i,length(f)-1,-1,-1
			tmp = get_property_data(f(i),"C")
			split tmp," ",r
			add_graph_data l_graph, (1. - r) * 100
		next
		
		手数 = 0

		if get_item_data(kifulist.kifulist_id, itemid) != ""{ //アイテムデータが設定されていたら、それは検索結果。
			nstat = int(refstr) //検索結果のSGFノード
			
			//それが格納されているツリーIDを探してカレントノードに設定、手数も合わせる
			set_current_node t, search_tree_by_item_id(get_root_tree_node(t), nstat, 手数)

			move_next_int kifu_start_num_result

			logmes "検索結果を発見 -> " + nstat

		}else{
			nownode = get_root_tree_node(t)
			move_next_int kifu_start_num
		}

		gosub*syncboard
		redraw_stones board
		redraw_buffer l_graph

		init_group
		init_tejun
		
		return 1
	}
	return 0
*next_kifu
	move_listbox_index kifulist(current_kifulist), 1
	a = select_kifulist_item(stat, current_kifulist,1)
	return
*back_kifu
	move_listbox_index kifulist(current_kifulist),-1
	a = select_kifulist_item(stat, current_kifulist)

	return
*move_next
	move_next_int 1
	return
	
*move_back
	move_next_int -1
	return
*go10
	move_next_int 10
	return

*back10
	move_next_int -10
	return
	
*to_sgftop
	move_next_int -1000
	return
	
*to_sgfend
	move_next_int 1000
	return
	
*clearboard
	if ui_mode == MODE_KIFU_VIEW{
		clear_board board
	}else{
		dim user_board,19,19
		set_board_data board.1,user_board
		init_group
		init_tejun
	}
	
	treebox_clear t
	topnode = stat
	title ""
	current_kifulist = -1
	return
	
*getsgf_nowpoint
	if nownode < 0: return
	clipset get_node_sgf_nowpoint(get_tree_item_id(nownode))
	title "現局面をクリップボードにコピーしました"
	return
*getsgf

	dim nodelist
	
	repeat get_selected_item_indices(kifulist.current_kifulist, s)
		nodelist(cnt) = int(get_value(filename_to_topnode,get_item_name(kifulist.current_kifulist, s(cnt))))
	loop
	new_node = merge_node(nodelist)
	clipset get_node_sgf(new_node)
	del_sgf_node new_node, 1 //削除して完了
	title "棋譜をクリップボードにコピーしました"
	return
*loadsgf
	dim t
	newmod t, treebox, treebox_area
	sdim s, $FFFF
	clipget s, varsize(s)
	
	if load_sgf(s) < 0: return
	
	topnode = load_sgf_set_board(t, stat, board)
	
	blackplayer = get_property_data(topnode, "PB")
	whiteplayer = get_property_data(topnode, "PW")

	title" 黒 " + blackplayer + "   白 " + whiteplayer
	return
*group_clear
	if g_group = -1{
		init_group
	}else{
		clear_group g_group
	}
	return
*tejun_clear
	if te = -1{
		init_tejun
	}else{
		clear_tejun te
	}
	return
*save_file
	tmpdir = dir_cur
	savedir = "save"

	dim nodelist
	repeat get_selected_item_indices(kifulist.current_kifulist, node_ids)
		nodelist(cnt) = int(get_value(filename_to_topnode,get_item_name(kifulist.current_kifulist, node_ids(cnt))))
	loop
	new_node = merge_node(nodelist)
	s = get_node_sgf(new_node)
	notesel s
		logmes dirname + "/" + savedir + "/" + get_item_name(kifulist.current_kifulist, node_ids(0))
		notesave dirname + "/" + savedir + "/" + get_item_name(kifulist.current_kifulist, node_ids(0))
	noteunsel

	del_sgf_node new_node, 1 //削除して完了
	
	chdir tmpdir

	title "棋譜をSGF形式で保存しました"
	return
*create_pattern
	time = keyfpstime
	kl = kifulist_notepad
	gosub*create_pattern_main
	return
*create_pattern2
	time = keyfpstime
	kl = notepad_minus_notepad(kifulist_notepad, search_result_sgflist)
	logmes strmid(kifulist_notepad,0,50)
	gosub*create_pattern_main
	return
*create_pattern3
	time = keyfpstime
	kl = search_result_sgflist
	gosub*create_pattern_main
	return
	
*create_pattern_main
	logmes "検索開始"
	
	get_board_data board.ui_mode, m
	set_board_pattern m
	set_coordinate_pattern v
	set_base
	
	
	if use_bitboard{ ;厳密検索
		
		result_num = search2(kl, m, search_result, max_depth, enableColorFlip, v, kifu_update, loadmax, inverse, filename_to_topnode)
		
	}else{ ;通常検索

		result_num = search(kl, search_result, max_depth, enableColorFlip, kifu_update, loadmax,inverse, filename_to_topnode)
	}

	if result_num < 0{
		//早期リターンなら何もせず終わる。
		logmes "検索早期リターン！当然０件だよ" + result_num
		return
	}

	save_history
	combox_set_str g_combox(combox_history_obj), get_history_str_for_combox()

	search_result_sgflist = ""
	
	repeat result_num
		search_result_sgflist += search_result(0, cnt) + "\n"
	loop

	//search_result_sgflistに結果リスト、result_numに結果の数が入っている。

	gosub *filtering_and_make_listbox


	logmes "検索終了 -> " +(keyfpstime - time) + "ms  " + fn + "件の検索結果"

	return
	
*filtering_and_make_listbox

	//フィルタリング処理
	//search_resultに結果を保持している
	if result_num = -1: return
	logmes "filtering_start!!!"
	dim filtered_result, 2, result_num　//フィルター後の結果を入れる変数
	dim fn //フィルター後の結果の数

	if filter_on{
		//モデルでのフィルター
		notesel model_list
			noteget selected_model, get_value_g_combox(g_combox)
		noteunsel
		repeat result_num
		
			tn = int(get_value(filename_to_topnode, search_result(0, cnt))) //topnodeからプレイヤー情報取得
			blackplayer = get_property_data(tn, "PB")
			split blackplayer,"-",bp
			whiteplayer = get_property_data(tn, "PW")
			split whiteplayer,"-",wp
			modelnames = strmid(bp.1, 0, 3), strmid(wp.1, 0, 3) //モデル名取得！
	
			if get_value_g_combox(g_combox) == 0 || modelnames.0 == selected_model || modelnames.1 == selected_model {
				filtered_result(0,fn) = search_result(0,cnt)
				filtered_result(1,fn) = search_result(1,cnt)
				fn++
			}
		loop
		//その他のフィルター

	}else{
		//フィルターなし
		repeat result_num
			filtered_result(0,cnt) = search_result(0,cnt)
			filtered_result(1,cnt) = search_result(1,cnt)
			fn++
		loop
	}
	
	//最終結果を文字列化
	search_result_sgflist = ""
	repeat fn
		if cnt{
			search_result_sgflist += "\n"
		}
		search_result_sgflist += filtered_result(0,cnt)
	loop
		
	if search_result_sgflist != ""{

		sortnote search_result_sgflist, 1 //結果を最新棋譜順にソート
		current_kifulist = matchlist
	}
	
	//リストボックスに流し込む
	del_item_all kifulist.matchlist
	add_item kifulist.matchlist, search_result_sgflist
	
	repeat fn
		sortget n, cnt
		add_item_data kifulist.matchlist, cnt, filtered_result(1,n)
	loop

	set_g_label g_label.1, "検索結果(" + fn + ")件" //ラベル更新

	return
	
*loadfile
	
	棋譜取得 kifu_dirname, 100, 3000, 1000 * 60 * 3 // katagoホームページから最新棋譜を追加ダウンロード
		
	chdir dirname

	gosub*load_kifu_folder
	
	return

#deffunc move_next_int int p1
	if nownode < 0: return 0
	moved = 0
	if p1 > 0{
		repeat p1
			nownode = get_current_node(t)
			if get_tree_root_child(nownode) != -1{
				set_current_node t, get_tree_root_child(nownode)
				if stat{
					手数++
				}
				moved += stat
			}
		loop
	}else{
		repeat abs(p1)
			nownode = get_current_node(t)
			if get_tree_parent(nownode) != -1{
				set_current_node t, get_tree_parent(nownode)
				if stat{
					手数--
				}
				moved += stat
			}
		loop
	}

	pretime = keyfpstime

	if moved{
		gosub*syncboard
		redraw_buffer l_graph
	}


	return moved
	
*syncboard
	logmes "syncboard"
	nownode = get_current_node(t)
	if nownode < 0: return

	tmp = get_property_coordinate_cash(get_tree_item_id(nownode), x, y)

	マンハッタン距離 = abs(x - pre_xy)   +   abs(y - pre_xy.1)

	pre_xy = x, y

	if get_tree_item_id(nownode) == topnode{
		tmp = "0.50"
	}else{
		tmp = get_property_data(get_tree_item_id(nownode), "C")　//katago-rating-gameには、コメントに形勢判断が入ってるので取得
	}
	sync_treebox_board t, board

	split tmp," ", c_list
	
	redraw_stones board
	return
	
*load_kifu_folder
	treebox_clear t
	chdir kifu_dirname
	del_item_all kifulist
	dirlist files,"*.sgf"
	sdim ss
	notesel ss 
		ss = shuffle_notepad(files)
		sdim filelist
		repeat notemax
			noteget tmp, cnt
			filelist += tmp + "\n"
		loop
		set_g_label g_label, "棋譜リスト("+notemax+")件"
	noteunsel
	add_item kifulist, filelist
	kifu_update = 1
	kifulist_notepad = filelist
	return
	

#deffunc load_search_history int p1

	ui_mode = MODE_BOARD_EDIT
	
	load_history p1 //それぞれ、対象座標情報、碁盤情報、グループ情報
	get_board user_board
	get_coordinate_set v
	set_g_checkbox g_chkbox.mode_chkbox, ui_mode
	set_board_data board.ui_mode, user_board

	redraw_stones board.ui_mode
	pre_ui_mode = ui_mode

	return

/* history復元関連のメモ
#deffunc get_board array a
#deffunc get_coordinate_set var a
#deffunc get_group array a
#deffunc get_tejun array a
*/
	
*save_info //終了処理
	chdir dirname
	sdim s,1024
	notesel s
	noteadd str(ginfo(10)) //ウィンドウサイズ
	noteadd str(ginfo(11))
	noteadd str(save_window_position) //ウィンドウ位置
	noteadd str(save_window_position.1)
	noteadd str(save_window_size) //描画領域サイズ
	noteadd str(save_window_size(1))
	noteadd str(max_depth)
	noteadd str(enableColorFlip)
	noteadd str(view_hosi)
	noteadd str(last_move_mark)
	noteadd str(kifu_start_num)
	noteadd str(loadmax)
	noteadd str(auto_interval)
	noteadd str(alpha_interval)
	noteadd str(m_interval)
	IsIconic hwnd: 最小化 = stat
	IsZoomed hwnd: 最大化 = stat
	noteadd str(最小化)
	noteadd str(最大化)
	notesave window_file_name
	save_load_manager_save //グリッド情報保存
	end