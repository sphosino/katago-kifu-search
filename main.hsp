#packopt name "KataGo棋譜検索"
#packopt hide 1
#bootopt notimer 1 //ツールなので、高精度タイマーを使用しない

;#addition "WrapCall.as" ;knowbugが使うコールスタック監査、重バグ特定専用

#include "basic.hsp" //hsp_commonから利用するファイルを列挙

#include "modules/grid_system/area_grid_system.hsp"

#include "modules/sgf.hsp"
#include "setting_defines.hsp"
#include "modules/search/pattern.hsp"
#include "modules/search/draw_pattern.hsp"
#include "nodmod/ProcLinkModule.hsp"
#include "kifu_protocol.hsp"
#include "div_notepad.hsp"

#include "tooltip.hsp"

#include "go_game_manager.hsp"
#include "calc_cores.hsp"

#include "hspext.as"
#include "user32.as"

#ifdef _debug
	dirname = "C:\\Users\\owner\\Desktop\\katago-kifu-search"
#else
	dirname = dir_exe
#endif
subdir = dirname + "\\sub"
kifudir = dirname + "\\棋譜"
savedir = dirname + "\\save"

#const MODE_KIFU_VIEW 0
#const MODE_BOARD_EDIT 1

#const DBL_INTERVAL 250 //ダブルクリック判定間隔(ms)

#const BG_COLOR $808080 // 128,128,128

; --- 簡易二重起動防止 ---
 APP_IDENTIFIER_KEY = "MyUniqueAppKey_20250731" ; アプリケーションごとにユニークなキーを設定
#define MM_KEY_OFFSET    0   ; アプリケーションキーを格納するオフセット (64バイト)
#define MM_HWND_OFFSET   64  ; ウィンドウハンドルを格納するオフセット (4バイト)
#define MM_FILE_SIZE     (MM_KEY_OFFSET + 64 + MM_HWND_OFFSET + 4) ; ファイル全体のサイズ (十分なサイズを確保)

; --- 起動チェックとアクティブ化 ---
sdim read_key, 64  ; app_keyを読み込むためのバッファ
sdim read_hwnd, 64 ; hwndを読み込むためのバッファ

; キーの読み込み
nocoMemomapRead read_key, APP_IDENTIFIER_KEY, 64, MM_KEY_OFFSET, 0

; 既存のキーと一致するかチェック
if read_key == APP_IDENTIFIER_KEY {
    ; 既に起動している
    ; 既存のウィンドウハンドルを読み込む
    nocoMemomapRead read_hwnd, APP_IDENTIFIER_KEY, 4, 0, MM_HWND_OFFSET
    
    if lpeek(read_hwnd){ ; 有効なハンドルが取得できた場合

        FlashWindow lpeek(read_hwnd), 0
		ShowWindow lpeek(read_hwnd), 1
        SetForegroundWindow lpeek(read_hwnd)
    }
    
    end ; 現在のプロセスは終了
}
//起動中の証を書き込む
nocoMemoryMapping APP_IDENTIFIER_KEY, MM_FILE_SIZE
nocoMemomapWrite APP_IDENTIFIER_KEY, APP_IDENTIFIER_KEY, 64, MM_KEY_OFFSET, 0
this_hwnd = hwnd
nocoMemomapWrite APP_IDENTIFIER_KEY, this_hwnd, 4, MM_HWND_OFFSET, 0
//-----------------------------------------------------------------------------


//検索中時のエフェクト。推奨しない動作だが、複数回押されてもいいようにスタックに積む。
dim scba_effect_stack
scba_effect_num = 0

//子プロセスからの結果を格納する
sdim tmp_filename, 64
sdim tmp_path, INFO_SIZE ; ヒット位置

newmod search_id_manager, id_manager

//前回起動時の情報があれば復元

chdir subdir
exist SETTING_FILE_NAME

notesel setting_str
if strsize == -1{
	repeat SETTING_MAX_LINE
		noteadd ""
	loop
	
	sx = ginfo(20) * 3 / 4
	sy = ginfo(21) * 3 / 4
	wx = (ginfo(20) - sx) / 2
	wy = (ginfo(21) - sy) / 2
	//探索の最大深さ
	max_depth = DEFAULT_MAX_DEPTH
	
	//色反転を含めるか
	enableColorFlip = 1
	
	//星を表示するか
	view_hosi = 1

	//最終手表示
	last_move_mark = 1
	
	//棋譜を何手目から表示するか
	kifu_start_num = 10

	//棋譜再生速度(ms)
	auto_interval = 1000
	alpha_interval = 10000
	m_interval = 5000

	load_limit = 100000 //１０万件
	child_target_wait = DEFAULT_TARGET_WAIT //子プロセス達がOSに返す時間

}else{
	noteload SETTING_FILE_NAME

	noteget_ wx, LINE_WINDOW_POSITION_X
	noteget_ wy, LINE_WINDOW_POSITION_Y
	noteget_ sx, LINE_WINDOW_SIZE_X
	noteget_ sy, LINE_WINDOW_SIZE_Y
	noteget_ max_depth, LINE_MAX_DEPTH
	noteget_ enableColorFlip, LINE_COLORFLIP
	noteget_ view_hosi, LINE_VIEW_HOSI
	noteget_ last_move_mark, LINE_LAST_MOVE_MARK
	noteget_ kifu_start_num, LINE_KIFU_START_NUM
	noteget_ auto_interval, LINE_AUTO_INTERVAL
	noteget_ alpha_interval, LINE_ALPHA_INTERVAL
	noteget_ m_interval, LINE_M_INTERVAL
	noteget_ auto_download, LINE_AUTO_DOWNLOAD_TIME
	noteget_ 最大化, LINE_MAXIMIZED
	noteget_ MAX_CHILDREN, LINE_PROCESS_COUNT
	noteget_ load_limit, LINE_LOAD_LIMIT
	noteadd_ child_target_wait, LINE_TARGET_WAIT

	if wx < 0{
		wx = (ginfo(20) - x) / 2
		wy = (ginfo(21) - y) / 2
	}

	sx = limit(sx, 460)
	sy = limit(sy, 345)

}

noteunsel


if load_limit < 3000: load_limit = 100000 //３０００件は読み込もうぜ。

//ウィンドウ作成
screen 0, ginfo(20), ginfo(21),, wx, wy, sx, sy

GetWindowLong hwnd, -16
SetWindowLong hwnd, -16, stat | $10000 | $40000

save_window_status = ginfo(4), ginfo(5), ginfo(12), ginfo(13)

if 最大化: sendmsg hwnd, $112, $F030

redraw 2
boxf
color 255, 255, 255
tmp = 0, 0, ginfo(12), ginfo(13)
set_max_centering_mes 40
centering_mes "システム起動中・・・", tmp, "メイリオ"
redraw

//初期化開始
nocoClearCopyDataQueue HEADER_SIZE + RECORD_SIZE * 40000

v = "" //検索対象座標セット　xxyy,xxyy... 形式
search_result_sgflist = ""
jidou = 0
着手番号表示 = 0
ui_mode = MODE_KIFU_VIEW
set_treeview 37, 37
set_treeview_position 10,20
set_tree_direction 6

topnode = -1

//-- ゲーム状態の管理用変数 ---
c_list = "0.50" ; 形勢（評価値）データ（KataGoコメントから）
dim pre_xy, 2   ; 前の座標を保持（マンハッタン距離用)
dim user_board, 19, 19 ;　プレイヤーが操作する仮盤面

pre_window_size = -9999,-9999
pre_ui_mode = -1

//矩形範囲指定用
rn = 0
dim rect, 4
dim rect_stack, 4

//検索結果受け取り用
dim matchlist                ; 検索結果用リストボックスIDを格納


sdim kifulist_notepad

pre_filter_on = -1
pre_filter = -1



//FPS設定
setfps 30 //目標FPSセット(初期値)
enable_auto_adjust //目標FPS自動調整有効化(target_wait基準)
set_target_wait 10

//使用キーの宣言
delkey_all
addkey 1 //左クリック
addkey 2 //右クリック
addkey 17 //ctrl
addkey 'C'
addkey 'V'
addkey 'A'

repeat 4
	addkey 37+cnt //カーソルキー
loop

//乱数を初期化
randomize

//saveフォルダを空にする
chdir savedir
dirlist filelist, "*.sgf"
notesel filelist
repeat notemax
	noteget tmp, cnt
	delete tmp
loop
noteunsel

//エリア作成
root = make_area_child(1,1)
	
	body_area = make_area_child(3,1, root)
		sidebar_area = make_area_child(1,2,body_area)
		sidebar_buttons = make_area_child(2,3,sidebar_area)
		sidebar_kifu_area = make_area_child(1,2)
			sidebar_kifulist_area = make_area_child(2,,sidebar_kifu_area)
			
			sidebar_kifulist_buttons = make_area_child(2,2)

				sidebar_kifulist1 = make_area_child(,4,sidebar_kifulist_area)
				sidebar_kifulist2 = make_area_child(,4,sidebar_kifulist_area)

					sidebar_kifulist_label1 = make_area_child(,,sidebar_kifulist1)
					sidebar_sort1 = make_area_child(3)
					sidebar_kifulist = make_area_child()
					kifustart = make_area_child()
						sort1_asc = make_area_child(,,sidebar_sort1)
						sort1_desc = make_area_child()
						sort1_shuffle = make_area_child()

					sidebar_kifulist_label2 = make_area_child(,,sidebar_kifulist2)
					sidebar_sort2 = make_area_child(3)
					sidebar_kifulist_match = make_area_child()
					kifustart_result = make_area_child()
						sort2_asc = make_area_child(,,sidebar_sort2)
						sort2_desc = make_area_child()
						sort2_shuffle = make_area_child()
					
				sidebar_kifulist_match_back = make_area_child(,,sidebar_kifulist_buttons)
				sidebar_kifulist_match_next = make_area_child()
				chkbox_autoplay = make_area_child()
				slider_area = make_area_child(,3)
					slider_1 = make_area_child(,,slider_area)
					slider_2 = make_area_child()
					slider_3 = make_area_child()
			chkbox_last_move = make_area_child(,,sidebar_buttons)
			chkbox_view_hosi = make_area_child()
			button_getsgf = make_area_child()
			button_getsgf_nowpoint = make_area_child()
			button_download_file = make_area_child()
			button_save_file = make_area_child()
			
		goban_area = make_area_child(1,2,body_area)
				goban_body_area = make_area_child(,,goban_area)
				goban_footer = make_area_child(7,,goban_area)
					back_top = make_area_child(,,goban_footer)
					back_one = make_area_child()
					back_ten = make_area_child()
					go_ten = make_area_child()
					go_one = make_area_child()
					go_end = make_area_child()
					button_clearboard = make_area_child()
					
		goban_tool_area = make_area_child(1,6,body_area)
			goban_graph_area = make_area_child(1,2,goban_tool_area)
				treebox_area = make_area_child(,,goban_graph_area)
				line_graph_area = make_area_child()
			
			combox_history = make_area_child(,,goban_tool_area)

			goban_search_area = make_area_child(3,2,goban_tool_area)
				button_search = make_area_child(,,goban_search_area)
				button_exclude_search = make_area_child()
				button_narrow_down_search = make_area_child()
				chkbox_colorflip = make_area_child()
				chkbox_use_bitboard = make_area_child()
				chkbox_inverse = make_area_child()
			goban_filter_area = make_area_child(1,2,goban_tool_area)
				goban_filter_area_header = make_area_child(,,goban_filter_area)
					chkbox_filter = make_area_child(,,goban_filter_area_header)
				goban_filter_area_body   = make_area_child(2,,goban_filter_area)
					combox_modelname = make_area_child(,,goban_filter_area_body)
			tejun_area = make_area_child(1,2,goban_tool_area)
				tejun_sub = make_area_child(2,1,tejun_area)
					button_tejun_clear = make_area_child(,,tejun_sub)
					chkbox_inc = make_area_child()
				radiobox_tejun = make_area_child(,,tejun_area)
			
			goban_edit_area = make_area_child(2,1, goban_tool_area)
				goban_edit_stone = make_area_child(1,2,goban_edit_area)
					chkbox_tyakusyu = make_area_child(,,goban_edit_stone)
					radiobox_goban_edit = make_area_child()
				goban_edit_group = make_area_child(1,2,goban_edit_area)
					button_group_clear = make_area_child(,,goban_edit_group)
					radiobox_grouping = make_area_child()

//グリッド情報をロード（エリアを作成してからでないと復元できない）
chdir subdir
exist "area.var" 
if strsize >= 0{
	save_load_manager_load
}

//各エリアの設定
set_grid_area_back_color sidebar_kifulist_area, $333333
set_grid_area_back_color goban_search_area,$333333
set_grid_area_back_color goban_edit_stone,$333333
set_grid_area_back_color goban_edit_group,$333333
set_grid_area_back_color goban_footer,$333333
set_grid_area_back_color treebox_area ,$333333
set_grid_area_back_color goban_filter_area , $333333
set_grid_area_back_color tejun_area, $333333

set_padding sidebar_kifulist1, 0,0,0,0
set_padding sidebar_kifulist2, 0,0,0,0
set_margin sidebar_kifulist1, 0,5
set_margin sidebar_kifulist2, 0,5

set_padding sidebar_sort1, 0, 0
set_padding sidebar_sort2, 0, 0
set_margin sidebar_sort1, 0,0
set_margin sidebar_sort2, 0,0

set_padding goban_area, , 0

add_tooltip combox_history, "検索パターン履歴"
add_tooltip button_getsgf, "選択中の棋譜をSGF形式でクリップボードにコピー"
add_tooltip button_getsgf_nowpoint, "現局面をSGF形式でクリップボードにコピー"
add_tooltip button_save_file, "選択中の棋譜をSGF形式で一時フォルダに保存"
add_tooltip kifustart, "何手目から表示するかを設定"
add_tooltip kifustart_result, "マッチした局面から前後何手目を表示するかを設定"
add_tooltip combox_modelname, "対局者名（モデル名）でフィルタ"
add_tooltip slider_1, "基本待ち時間"
add_tooltip slider_2, "形勢判断の差による待ち時間"
add_tooltip slider_3, "直前の手との距離による待ち時間"
add_tooltip sort2_asc, "古い棋譜順"
add_tooltip sort2_desc,"新しい棋譜順"
add_tooltip sort1_asc, "古い棋譜順"
add_tooltip sort1_desc, "新しい棋譜順"



set_tooltip_color 0x333333, 0xFFFFFF

//実体作成
newmod g_buttons, grid_button, "保存",*save_file,button_save_file
newmod g_buttons, grid_button, "SGF取得"   , *getsgf  , button_getsgf
newmod g_buttons, grid_button, "SGF取得\n(現局面)", *getsgf_nowpoint, button_getsgf_nowpoint
newmod g_buttons, grid_button, "クリア"  , *clearboard, button_clearboard
newmod g_buttons, grid_button, "検索"          , *create_pattern, button_search
newmod g_buttons, grid_button, "除外検索"      , *create_pattern2, button_exclude_search
newmod g_buttons, grid_button, "絞込検索"  , *create_pattern3, button_narrow_down_search
newmod g_buttons, grid_button, "次の棋譜"  , *next_kifu, sidebar_kifulist_match_next
newmod g_buttons, grid_button, "前の棋譜"  , *back_kifu, sidebar_kifulist_match_back
newmod g_buttons, grid_button, "|<",*to_sgftop, back_top
newmod g_buttons, grid_button, "<<", *back10, back_ten
newmod g_buttons, grid_button, "<", *move_back, back_one
newmod g_buttons, grid_button, ">", *move_next, go_one
newmod g_buttons, grid_button, ">>", *go10, go_ten
newmod g_buttons, grid_button, ">|",*to_sgfend,go_end
newmod g_buttons, grid_button, "石グループ解除",*group_clear, button_group_clear
newmod g_buttons, grid_button, "手順解除",*tejun_clear, button_tejun_clear
newmod g_buttons, grid_button, "昇",*lab_sort1_asc, sort1_asc
newmod g_buttons, grid_button, "降",*lab_sort1_desc, sort1_desc
newmod g_buttons, grid_button, "混",*lab_sort1_shuffle, sort1_shuffle
newmod g_buttons, grid_button, "昇",*lab_sort2_asc, sort2_asc
newmod g_buttons, grid_button, "降",*lab_sort2_desc, sort2_desc
newmod g_buttons, grid_button, "混",*lab_sort2_shuffle, sort2_shuffle

newmod g_chkbox, grid_checkbox, ui_mode           , "編集モード" , chkbox_tyakusyu: mode_chkbox = stat
newmod g_chkbox, grid_checkbox, enableColorFlip,"色反転含む", chkbox_colorflip: colorflip_chkbox = stat
newmod g_chkbox, grid_checkbox, jidou          ,"自動再生",chkbox_autoplay
newmod g_chkbox, grid_checkbox, view_hosi,"星表示", chkbox_view_hosi
newmod g_chkbox, grid_checkbox, last_move_mark,"最終手表示",chkbox_last_move
newmod g_chkbox, grid_checkbox, use_bitboard, "厳密検索", chkbox_use_bitboard
newmod g_chkbox, grid_checkbox, inverse, "反転検索",chkbox_inverse
newmod g_chkbox, grid_checkbox, filter_on, "検索結果にフィルターを適用", chkbox_filter
newmod g_chkbox, grid_checkbox, inc_tejun, "自動で次の番号へ", chkbox_inc: set_g_checkbox g_chkbox.stat, 1

newmod g_label, grid_label,"棋譜リスト",sidebar_kifulist_label1, $F5F5DC,$333333
newmod g_label, grid_label,"検索結果(0)件",sidebar_kifulist_label2,$F5F5DC,$333333

newmod g_stepper, grid_stepper, kifu_start_num, kifustart: set_stepper_limit g_stepper(stat), 0
newmod g_stepper, grid_stepper, kifu_start_num_result, kifustart_result: set_stepper_limit g_stepper(stat), -50

newmod g_slider, grid_slider, auto_interval , 1, slider_1, 100, 10000, 14 , 16
newmod g_slider, grid_slider, alpha_interval, 1, slider_2, 0  , 10000, 14 , 16
newmod g_slider, grid_slider, m_interval    , 1, slider_3, 0  , 10000, 14 , 16

model_list = "all\nb28\nb18\nb60\nb40"
newmod g_combox, grid_combox, modelname, model_list, combox_modelname
newmod g_combox, grid_combox, history_num, "検索履歴", combox_history: combox_history_obj = stat

newmod g_radiobox, grid_radiobox, g_edit, radiobox_goban_edit
add_item_radiobox g_radiobox, "●"
add_item_radiobox g_radiobox, "〇"
add_item_radiobox g_radiobox, "●〇"
add_item_radiobox g_radiobox, "削除"


newmod g_radiobox, grid_radiobox, g_group, radiobox_grouping : tmp = stat
add_item_radiobox g_radiobox.tmp, "A"
add_item_radiobox g_radiobox.tmp, "B"
add_item_radiobox g_radiobox.tmp, "C"
add_item_radiobox g_radiobox.tmp, "D"

newmod g_radiobox, grid_radiobox, te, radiobox_tejun: tmp = stat

repeat 9
	add_item_radiobox g_radiobox.tmp, str(cnt+1)
loop


newmod board, goban, 19,19,26,26, goban_body_area
newmod board, goban, 19,19,26,26, goban_body_area

newmod t, treebox,treebox_area

newmod l_graph, line_graph, line_graph_area
set_margin_line_graph l_graph, 27, 18, 13, 18



foreach g_label
	set_g_label_r g_label.cnt , 5, 4 | 8
loop

set_max_centering_mes 33

bg_id = make_draw_object(MOVE_TYPE_STATIC, "BOXF_FAST", LIFE_FOREVER, 0,0, ginfo(12), ginfo(13), strf("%d",BG_COLOR))
update_priority_draw_object bg_id, PRIORITY_BACK
//最初の時刻
pretime = keyfpstime


onexit *save_info //終了時に*save_infoにジャンプ

//棋譜読み込み

gosub*load_kifu_folder


foreach kifulist
	set_listbox_item_ysize kifulist.cnt, 25
	set_listbox_scollbar_width kifulist.cnt, 16
loop
gosub*loadsgf


#if 01
	tmp = dir_cur
	chdir subdir
	exec "download_sgf"
	chdir tmp
	await 50
#endif

window_status = 0, 0, 0, 0 //windowの位置サイズ監視用

title "KataGo自己対戦棋譜-検索システム"

*main
	;title ""+ginfo(10) + " : " + ginfo(11)
	計測 "manage_keyfps"
	manage_keyfps
	notify_dt_draw_object frametime()

	
	update_child_list //子プロセス監視

	deficit = MAX_CHILDREN - child_count_current
    if deficit >= 1{
	    tmp = dir_cur
   		chdir subdir
   		await 50
	    repeat deficit
	    	await 33
	    	exec "search_process",2
	    loop
	    chdir tmp
	    //全て起動するまで待つ
	    waitstarttime = keyfpstime
	    while nocoConnectInfo(0) <= MAX_CHILDREN 
	    	if keyfpstime - waitstarttime >= 10000{
		    	dialog "子プロセス起動失敗"
		    	end
		    }
	    	await 16
	    wend
	    棋譜リスト送信
	}
    
	gosub*on_copydata
	
	計測 "前フレームからの状態変化取得"

	//マウスのエリア間移動チェック
	if now_area != get_in_area() || _getkey(1) >= 1{
		now_area = get_in_area()
		set_tooltip now_area
		count = 0.
	}else{
		count+= frametime()
		if count >= 0.500: draw_tooltip now_area
	}

	//window状態変化
	
	if window_status != ginfo(4) || window_status.1 != ginfo(5) || window_status.2 != ginfo(12) || window_status.3 != ginfo(13){
		window_status = ginfo(4),ginfo(5),ginfo(12),ginfo(13)
		IsZoomed hwnd :最大化 = stat
		IsIconic hwnd :最小化 = stat
		if (最大化 | 最小化) == 0{
			save_window_status = ginfo(4),ginfo(5), ginfo(12), ginfo(13)
		}
		if 最小化 == 0{
			set_static_sizex get_entity_id(bg_id), ginfo(12)
			set_static_sizey get_entity_id(bg_id), ginfo(13)
		}
	}
	
	if 最小化: goto*main

	//combox状態変化
	
	cbox = g_combox(combox_history_obj)
	
	if get_dropdown_status(cbox){
		if is_changed_dropdown(cbox){
			;開かれた瞬間
			;現在の碁盤の状態を保存（履歴とはまた別に特別保持
			get_board_data board.ui_mode, now_board //碁盤の状態取得
			now_v = v //判定対象セットリスト
			get_group now_group //グループ状態取得
			get_tejun now_tejun //手順状態取得
			
			now_ui_mode = ui_mode //操作モード
			
		}else{
			if is_changed_cursor_item(cbox){
				
				if get_cursor_item(cbox) == -1{ //ドロップダウンの項目から外れたら
		
		
					; 記憶した碁盤を復元
					set_board_data board.ui_mode, now_board
					v = now_v
					set_group now_group
					set_tejun now_tejun
					
					ui_mode = now_ui_mode
		
				}else{
					load_search_history stat //履歴から復元するメソッド
					
					ui_mode = MODE_BOARD_EDIT
				}
				
				set_g_checkbox g_chkbox.mode_chkbox,  ui_mode //チェックボックスに操作モード通知
			}
		}
	}



	repeat 2
		set_最終手表示 board.cnt, last_move_mark
		set_星表示 board.cnt, view_hosi
	loop
	
	if pre_ui_mode != ui_mode {
		pre_ui_mode = ui_mode

		if ui_mode = MODE_KIFU_VIEW{
			init_group_tejun
		}else{
			get_board_data board  , user_board
			set_board_data board.1, user_board
			swapturn = 手数 + 1 & 1 //編集手番を現局面の次の手番にセット
		}
	}
	
	if pre_filter_on != filter_on{
		pre_filter_on = filter_on
		if filter_on{
			gosub *filtering_and_make_listbox
		}else{
			
			selected_num = get_selected_item_ids(kifulist.matchlist, select_items)
			
			g_filter_off kifulist.matchlist
			
				//選択
			repeat get_selected_item_ids(kifulist.matchlist , new_indices)
				current_id = new_indices(cnt)
				g_select_id kifulist.matchlist, current_id, 0 //全部クリア
				repeat selected_num
					if current_id == select_items(cnt){ //前のに存在してたら選択
						g_select_id kifulist.matchlist, current_id, 1
						break
					}
				loop
			loop

			
		}
		set_g_label g_label.1, "検索結果(" + get_list_item_num(kifulist.matchlist) + ")件"
	}else: if pre_combox_idx != get_value_g_combox(g_combox){
		pre_combox_idx = stat
		if filter_on{
			gosub *filtering_and_make_listbox
			set_g_label g_label.1, "検索結果(" + get_list_item_num(kifulist.matchlist) + ")件"
		}
	}
	
	計測 "入力処理"
	
	nownode = get_current_node(t)
	getBoardCoordinates board.ui_mode, point

	in_board = 0
	if 0 <= point && point < 19{
		if 0 <= point.1 && point.1 < 19{
			in_board = 1
		}
	}
	if debugmode == 0{
		//マウス操作
		if _getkey(2) == 1{ //右クリック

			if dragging_flag == 1{
				if rect >= 0{
					modify_coordinates_by_rect v, rect(0), rect(1), rect(2), rect(3), 1
				}
				dragging_flag = 0
			}else{
				if treebox_onmouseid(t) >= 0{
					set_current_node t, treebox_onmouseid(t)
					Treebox_toggle_openflag t, treebox_onmouseid(t)
				}
				if ui_mode == MODE_BOARD_EDIT{//編集モード
					if in_board{
						user_board(point,point.1) = (user_board(point,point.1)  + 1) \ 6
						set_board_data board.1, user_board
						if user_board(point, point.1) == 0{
							del_all_group_tejun point, point.1
						}
					}
				}
			}
		}

		//右長押しで、指定された範囲を除外
		if gethold_ms(2, 300, 400){
			if rn{
				rn--
				modify_coordinates_by_rect v, rect_stack(0,rn), rect_stack(1,rn), rect_stack(2,rn), rect_stack(3,rn), 1
				dragging_flag = 0
			}
		}
		
		if _getkey(1) == 1{ //左クリック
			if in_board == 0{
				spawn_ripple_effect mousex, mousey, PRIORITY_FRONT_EFFECT
				if treebox_onmouseid(t) >=0{
					set_current_node t, stat
					sync_treebox_board t, board
					手数 = treeview_onmouse_id_deep()
					gosub*syncboard
				}
			}else{
				dragging_flag = 1
				if in_board{
					get_board_data board , tmp
					get_board_data board.1, m
					if (ui_mode == MODE_KIFU_VIEW & (g_group == -1 || tmp(point,point.1) == 0)) || (ui_mode != MODE_KIFU_VIEW && g_edit == -1 && m(point, point.1) == 0){
						rect = limit(point,0,18),limit(point.1,0,18)
						rect(2) = rect, rect.1
					}
				}

			}
			
			inlistbox = 0
			foreach kifulist
				sel = listbox_on_id(kifulist.cnt, mousex, mousey)
				if sel != -1: inlistbox = 1 //リストボックスのなかだ。
				if sel >= 0{
					if select_kifulist_item(sel, cnt): break
				}
			loop
		}

		//キーによるドラッグ解除処理（先）
		if _getkey(1) == -1{//マウスが離されたとき
				
			dragging_flag = 0
			if rect(0) >= 0{
				modify_coordinates_by_rect v, rect(0), rect(1), rect(2), rect(3)
				rect_stack(0,rn) = rect(0), rect(1), rect(2), rect(3)
				rn++
				dim rect,4
			}
		}

		//ドラッグ中の処理(後）
		if dragging_flag{
			
			rect(2) = limit(point(0),0,18)
			rect(3) = limit(point(1),0,18)

			if in_board {
				switch g_edit

				swbreak
				case 0
					user_board(point,point.1) = 1
					set_board_data board.1, user_board
				swbreak
				case 1
					user_board(point,point.1) = 2
					set_board_data board.1, user_board
				swbreak
				case 2
					if prex == point.0 & prey == point.1{
					}else{
						prex = point.0
						prey = point.1
						swapturn^1
						user_board(point,point.1) = swapturn + 1
						set_board_data board.1, user_board
					}
				swbreak
				case 3
					user_board(point,point.1) = 0
					set_board_data board.1, user_board
					del_all_group_tejun point, point.1
				swbreak

				swend

				if g_group >= 0{

					if rect == -1{
						if ui_mode == MODE_KIFU_VIEW{
							get_board_data board  , tmp
							OK = tmp(point,point.1)
						}else{
							OK = user_board(point,point.1)
						}
						if OK{
							add_group point, point.1, g_group
						}
					}
				}
							//手順
				if _getkey(1) == 1{
					if te >= 0{
						get_board_data board(ui_mode), m
						if m(point(0),point(1)){
							repeat 9
								del_tejun point(0),point(1), cnt
							loop
							add_tejun point(0),point(1), te
							if inc_tejun{
								te = (te + 1) \ 9
							}
						}
					}
				}
			}
		}else{
			rect = -1
		}

	
		//マウスホイール
		mw = mousew
	
		in_kifulist = 0
		
		foreach kifulist
			if listbox_on_id(kifulist.cnt,mousex, mousey) >= 0{
				in_kifulist++
				if mw < 0: scroll_down   kifulist.cnt
				if mw > 0: scroll_up     kifulist.cnt
			}
		loop
		
		if (in_kifulist == 0) && (ui_mode == MODE_KIFU_VIEW){
			if mw < 0 : gosub*move_next
			if mw > 0 : gosub*move_back
		}
	
		//キー操作
		if _getkey(17) >= 1{ //CTRL
			if _getkey('C') == 1 { //CTRL + C
				gosub*getsgf
			}
			if _getkey('V') == 1 { //CTRL + V
				gosub*loadsgf
			}
		}
		
		//自動再生
		計測 "自動再生"

		//-------------------基本wait +  エンジンの形勢判断によるwait + 直前の手とのマンハッタン距離によるwait
		if jidou & (ui_mode == MODE_KIFU_VIEW){
			
			if pre_jidou == 0{
				前の形勢 = double(c_list)
				pre_jidou = 1
			}

			logmes strf("%d,%d", auto_interval + (形勢の変化率 * alpha_interval) + (m_interval * マンハッタン距離 / 36), keyfpstime - pretime)
			if keyfpstime - pretime >= auto_interval + (形勢の変化率 * alpha_interval) + (m_interval * マンハッタン距離 / 36){
				pretime = keyfpstime
				logmes "moved"
				gosub *move_next
				
				
				今の形勢 = double(c_list)
				形勢の変化率 = absf(今の形勢 - 前の形勢)
				前の形勢 = 今の形勢
			}
		}else{
			pre_jidou = 0
			if ginfo_act == -1{
				skipdraw = 1
				skipcount++
			}
		}
	}
	
	//CTRLダブルクリックでデバッグモード切替
	if getdbl_ms(17, DBL_INTERVAL){
		debugmode ^ 1
		logmes "switched debugmode ->" +debugmode
	}


	計測 "object_managers"

	//碁盤エリアの背景に形勢を反映(局面をユーザーが進めると動的に変わる）
	a = double(c_list) * 255
	
	get_rect goban_area, goban_back_rect
	make_instant_draw_object "BOXF", (goban_back_rect + goban_back_rect.2) / 2, (goban_back_rect.1 + goban_back_rect.3) / 2, goban_back_rect.2-goban_back_rect,goban_back_rect.3-goban_back_rect.1, strf("$%02X%02X%02X",a,a,a)
	update_priority_draw_object stat, PRIORITY_BACK
	碁盤表示 board.ui_mode
	

	//エリア矩形表示
	draw_all_rect root, debugmode

	//グループ表示
	get_group tmp
	get_tejun tmp2
	group_tejun_draw board.ui_mode, tmp, tmp2
	
	//検索範囲表示

	draw_set_list_on_board board.ui_mode, v
	
	//各アイテム登録
	all_items_draw

	新しい手数 = 手数
	line_graph_manager l_graph, 新しい手数
	if 新しい手数 - 手数: move_next_int 新しい手数 - 手数

	if dragging_flag && rect >= 0{
		碁盤に矩形データを表示 board.ui_mode, rect
	}

	treebox_draw t, length(f)

	
	計測 "レンダラ"
	draw_objects //レンダラ経由描画

	計測描画　//計測結果描画

	redraw
	redraw 2
	goto*main
	
#deffunc all_items_draw

	foreach kifulist
		listbox_manager kifulist.cnt, current_kifulist = cnt
	loop
	
	foreach g_label
		draw_g_label g_label.cnt
	loop
	font "メイリオ", 29
	foreach g_chkbox
		draw_g_chkbox g_chkbox.cnt
	loop
	foreach g_buttons
		draw_g_button g_buttons.cnt
	loop
	foreach g_slider
		slider_manager g_slider.cnt
	loop
	foreach g_stepper
		draw_g_stepper g_stepper.cnt
	loop
	foreach g_radiobox
		draw_g_radiobox g_radiobox.cnt
	loop
	foreach g_combox
		combox_manager g_combox.cnt
	loop
	return

	
#defcfunc select_kifulist_item int itemid, int kifulist_id, int flag_next_or_back

	if itemid >= 0 && itemid < get_list_item_num(kifulist.kifulist_id){

		if topnode != -1: del_sgf_node topnode, 1

		current_kifulist = kifulist_id
		ui_mode = MODE_KIFU_VIEW
		if get_root_tree_node(t) >= 0{
			del_treenode(get_root_tree_node(t))
		}
		set_treeview_scroll
		//範囲指定を初期化
		sdim v
		rn = 0


		topnode = change_sgf(get_item_name(kifulist.kifulist_id, itemid), t, board)

		clear_graph l_graph

		get_nodelist int(get_property_data(topnode,"MN")), f
		set_end_xy l_graph, length(f), 100

		for i,length(f)-1,-1,-1
			tmp = get_property_data(f(i),"C")
			split tmp," ",r
			add_graph_data l_graph, (1. - r) * 100
		next
		
		手数 = 0

		dim path, 1024 / 4 + 32
		path = -1

		dup_item_data kifulist.kifulist_id, itemid, path
		
		if path >= 0{
			//それが格納されているツリーIDを探してカレントノードに設定、手数も合わせる
			set_current_node t, search_tree_by_item_id(get_root_tree_node(t), path)
			手数 = path

			move_next_int kifu_start_num_result

			logmes "検索結果を発見 -> " + path

		}else{
			nownode = get_root_tree_node(t)
			move_next_int kifu_start_num
		}

		gosub*syncboard
		redraw_stones board
		redraw_buffer l_graph

		init_group_tejun
		
		return 1
	}
	return 0
*next_kifu
	move_listbox_index kifulist(current_kifulist), 1
	a = select_kifulist_item(stat, current_kifulist,1)
	return
*back_kifu
	move_listbox_index kifulist(current_kifulist), -1
	a = select_kifulist_item(stat, current_kifulist)

	return
*move_next
	move_next_int 1
	return
	
*move_back
	move_next_int -1
	return
*go10
	move_next_int 10
	return

*back10
	move_next_int -10
	return
	
*to_sgftop
	move_next_int -1000
	return
	
*to_sgfend
	move_next_int 1000
	return
	
*clearboard
	if ui_mode == MODE_KIFU_VIEW{
		clear_board board
	}else{
		dim user_board, 19, 19
		set_board_data board.1, user_board
		init_group_tejun
	}
	
	treebox_clear t
	topnode = stat
	title ""
	current_kifulist = -1
	return
	
*getsgf_nowpoint
	if nownode < 0: return
	clipset get_node_sgf_nowpoint(get_tree_item_id(nownode))
	title "現局面をクリップボードにコピーしました"
	return
*getsgf

	gosub*kifu_merge

	//new_nodeにマージされたノードidが入っている

	clipset get_node_sgf(new_node) ; SGF文字列に変換し、クリップボードにセット

	gosub*kifu_merge_after
	
	title "棋譜をクリップボードにコピーしました"
	return
*save_file
	
	gosub*kifu_merge

	s = get_node_sgf(new_node) ; マージされたノードをSGFに変換
	
	notesel s
		//node_idsには選択されたアイテム名のリストが入ってる
		  logmes savedir + "/" + get_item_name_by_id(kifulist.current_kifulist, node_ids(0))
		notesave savedir + "/" + get_item_name_by_id(kifulist.current_kifulist, node_ids(0))
	noteunsel

	gosub*kifu_merge_after

	title "棋譜をSGF形式で保存しました"
	return
*kifu_merge
	tmpdir = dir_cur
	chdir kifudir
	dim nodelist
	notesel sgf
		repeat get_selected_item_ids(kifulist.current_kifulist, ids)
			filename = get_item_name_by_id(kifulist.current_kifulist, ids(cnt)) //ファイル名を取得
			noteload filename //ファイルをロード
			nodelist(cnt) = load_sgf(sgf) //展開してトップノードの番号を取得
		loop
	noteunsel
	new_node = merge_node(nodelist) //選択された棋譜をマージ
	return
*kifu_merge_after
	//削除して完了
	repeat length(nodelist)
		del_sgf_node nodelist(cnt), 1
	loop
	del_sgf_node new_node, 1

	chdir tmpdir
	return
	
*loadsgf
	dim t
	newmod t, treebox, treebox_area
	sdim s, $FFFF
	clipget s, varsize(s)
	if sgf_topnode >= 0{
		del_sgf_node sgf_topnode, 1
	}
	sgf_topnode = load_sgf(s)
	
	if sgf_topnode < 0: return

	
	topnode = load_sgf_set_board(t, sgf_topnode, board)
	
	blackplayer = get_property_data(topnode, "PB")
	whiteplayer = get_property_data(topnode, "PW")

	title" 黒 " + blackplayer + "   白 " + whiteplayer
	return
*group_clear
	if g_group = -1{
		init_group
	}else{
		clear_group g_group
	}
	return
*tejun_clear
	if te = -1{
		init_tejun
	}else{
		clear_tejun te
	}
	return

*create_pattern
	time = keyfpstime
	kl = kifulist_notepad
	gosub*create_pattern_main
	return
*create_pattern2
	time = keyfpstime
	
	kl = notepad_minus_notepad(kifulist_notepad, get_name_all_items(kifulist.matchlist))
	gosub*create_pattern_main
	return
*create_pattern3
	time = keyfpstime
	kl = get_name_all_items(kifulist.matchlist)
	gosub*create_pattern_main
	return
	
*create_pattern_main
	logmes "検索開始"

	if pre_kl != kl{
		pre_kl = kl
		repeat child_count_current
			nocoSendCopyData child_hwnd_list(cnt), kl, 検索棋譜, strlen(kl)
	    loop
	}
	//以下検索

	complate_count = 0

	//ui状態からベースパターンを作る
	get_board_data board.ui_mode, m
	set_board_pattern m
	set_coordinate_pattern v
	set_base
	save_history //履歴に追加
	combox_set_str g_combox(combox_history_obj), get_history_str_for_combox() //uiに反映

	del_item_all kifulist.matchlist


	set_g_label g_label.1, "検索中 -> (" + 0 + ")件" //ラベル更新
	set_g_label_bc g_label.1, $80DFFF
	get_rect sidebar_kifulist_label2, eff_rect
	
	scba_effect_stack(scba_effect_num) = spawn_search_bar_effect(eff_rect + eff_rect.2 >> 1, eff_rect.3 + 5, 0.8 * (eff_rect.2-eff_rect.1), 8, 80,PRIORITY_FRONT)
	scba_effect_num++

	if use_bitboard{ ;厳密検索
		
		logmes "厳密検索"
		search_id = get_new_id(search_id_manager)
		sdim params
		lpoke  params           , 0 , search_id
		lpoke  params           , 4 , max_depth
		lpoke  params           , 8 , enableColorFlip
		lpoke  params           , 12 , inverse
		get_base_binary params  , 16
		psize = stat

		repeat child_count_current
			nocoSendCopyData child_hwnd_list(cnt), params, 検索実行2, psize
		loop
		
		
	}else{ ;通常検索

		logmes "通常検索"
		//検索条件作成
		search_id = get_new_id(search_id_manager)
		sdim params
		lpoke params,0, search_id
		lpoke params,4, max_depth
		lpoke params,8, enableColorFlip
		lpoke params,12, inverse
		get_base_binary params, 16

		psize = stat
		logmes "命令実行-send -> "+psize + " process -> " + MAX_CHILDREN

		//検索実行させる
		repeat child_count_current
			nocoSendCopyData child_hwnd_list(cnt), params, 検索実行, psize
		loop
	}
	
	return
#deffunc 棋譜リスト送信
	//棋譜リスト送信
	repeat child_count_current
		nocoSendCopyData child_hwnd_list(cnt), b(cnt), 担当棋譜, strlen(b(cnt))

	loop
	return
	
*filtering_and_make_listbox
	
	sdim a, INFO_SIZE
	listcount = g_get_listbox_ids(kifulist.matchlist, newids, 1) //オリジナルに対して常に行う
	if listcount = 0: return

	//選択中の要素取得
    selected_num = get_selected_item_ids(kifulist.matchlist, select_items)


	ln = 0
	dim new_indices

	if get_value_g_combox(g_combox){

		logmes "選択されたアイテム" + get_value_g_combox(g_combox)
		notesel model_list
			noteget modelname,get_value_g_combox(g_combox)
		noteunsel
		logmes modelname
		

		repeat listcount
			dup_item_data_by_id kifulist.matchlist, newids(cnt), a
			dupptr black_player_name, varptr(a) + 1024     , 64, 2
			dupptr white_player_name, varptr(a) + 1024 + 64, 64, 2
	
			split black_player_name,"-",bn
			split white_player_name,"-",wn
			if strmid(wn(1),0,3) == modelname || strmid(bn(1),0,3) == modelname{
				new_indices(ln) = newids(cnt)
				ln++
			}
			if cnt \ 200 == 0: logmes ""+wn(1) + " : "+bn(1)
		loop
	
		
	}else{
		repeat listcount
			new_indices(ln) = newids(cnt)
			ln++
		loop
	}

	g_filter_on kifulist.matchlist, new_indices, ln

	//選択
	repeat ln
		current_id = new_indices(cnt)
		g_select_id kifulist.matchlist, current_id, 0 //全部クリア
		repeat selected_num
			if current_id == select_items(cnt){ //前のに存在してたら選択
				g_select_id kifulist.matchlist, current_id, 1
				break
			}
		loop
	loop

	
	return
*search_finish
	set_g_label g_label.1, "検索完了(" + get_list_item_num(kifulist.matchlist) + ")件"
	set_g_label_bc g_label.1, $F5F5DC
	repeat scba_effect_num
		destroy_draw_object scba_effect_stack(cnt)
	loop
	scba_effect_num = 0
	g_listbox_sort_by_text kifulist.matchlist, LISTBOX_SORT_DESC //新しい棋譜順
	return

#deffunc move_next_int int p1
	if nownode < 0: return 0
	moved = 0
	if p1 > 0{
		repeat p1
			nownode = get_current_node(t)
			if get_tree_root_child(nownode) != -1{
				set_current_node t, get_tree_root_child(nownode)
				if stat{
					手数++
				}
				moved += stat
			}
		loop
	}else{
		repeat abs(p1)
			nownode = get_current_node(t)
			if get_tree_parent(nownode) != -1{
				set_current_node t, get_tree_parent(nownode)
				if stat{
					手数--
				}
				moved += stat
			}
		loop
	}

	pretime = keyfpstime

	if moved{
		gosub*syncboard
		redraw_buffer l_graph
	}


	return moved
	
*syncboard
	logmes "syncboard"
	nownode = get_current_node(t)
	if nownode < 0: return

	tmp = get_property_coordinate_cash(get_tree_item_id(nownode), x, y)

	マンハッタン距離 = abs(x - pre_xy)   +   abs(y - pre_xy.1)

	pre_xy = x, y

	if get_tree_item_id(nownode) == topnode{
		tmp = "0.50"
	}else{
		tmp = get_property_data(get_tree_item_id(nownode), "C")　//katago-rating-gameには、コメントに形勢判断が入ってるので取得
	}
	sync_treebox_board t, board

	split tmp," ", c_list
	
	redraw_stones board
	return
	
*load_kifu_folder
	
	treebox_clear t
	chdir kifudir
	st = keyfpstime
	dirlist files,"*.sgf"
	棋譜数 = limit(stat,,load_limit)

		
	if MAX_CHILDREN <=  0{
		MAX_CHILDREN =  get_auto_cores() //子プロセス数
	}
	if 棋譜数 / MAX_CHILDREN >= 19000{
		棋譜数 = limit(MAX_CHILDREN * 19000,,load_limit)
	}

	gosub *init_parent_process
	
	notesel files
	
		;files = shuffle_notepad(files)
			
		//SGFモジュール初期化
		init_sgf_module 10

		//棋譜リスト初期化
		dim kifulist
		
		newmod kifulist, grid_listbox, sidebar_kifulist, 棋譜数
		newmod kifulist, grid_listbox, sidebar_kifulist_match, 棋譜数: matchlist = stat

		if 棋譜数 != notemax{
			sdim ss
			repeat 棋譜数
				noteget tmp, 棋譜数-cnt-1 //最新棋譜順に読み込む
				if cnt{
					ss += "\n" + tmp
				}else{
					ss += tmp
				}
			loop
			add_item kifulist, ss
			kifulist_notepad = ss
			
		}else{
			add_item kifulist, files
			kifulist_notepad = files
			g_listbox_sort_by_text kifulist, LISTBOX_SORT_DESC
		}
	
		set_g_label g_label, "棋譜(" + get_list_item_num(kifulist) + ")件"
	
		//担当棋譜リストを作る
	noteunsel
		
	div_notepad kifulist_notepad, child_count_current, b //棋譜リストを各プロセス用に分割

	
	棋譜リスト送信

	return
	

#deffunc load_search_history int p1

	ui_mode = MODE_BOARD_EDIT
	
	load_history p1 //それぞれ、対象座標情報、碁盤情報、グループ情報
	get_board user_board
	get_coordinate_set v
	set_g_checkbox g_chkbox.mode_chkbox, ui_mode
	set_board_data board.ui_mode, user_board

	redraw_stones board.ui_mode
	pre_ui_mode = ui_mode

	return

/* history復元関連のメモ
#deffunc get_board array a
#deffunc get_coordinate_set var a
#deffunc get_group array a
#deffunc get_tejun array a
*/
	



*init_parent_process
	dim child_hwnd_current, MAX_CHILDREN      // 子プロセスのウィンドウハンドル配列
	sdim child_status_current, 64, MAX_CHILDREN // 子プロセスの状態配列
	child_count_current = 0                   // 現在起動中の子プロセス数
	dim prekeys, 9                        // キー入力の状態を保持
    // ユニークなアプリ名を作成
    app_name = strf("%05d_myApp",rnd(32768))
   	nocoConnectAccept app_name
    // 設定ファイルを作成し、アプリ名と親のウィンドウハンドルを保存

    notesel s
	    noteadd app_name
	    noteadd str(hwnd)
	    tmp = dir_cur
		chdir subdir
	    	notesave "app_name.txt"
		chdir tmp
	noteunsel
	await 50

	tmp = dir_cur
    chdir subdir
    repeat MAX_CHILDREN
    	await 16
    	exec "search_process"
    loop
    chdir tmp
    //全て起動するまで待つ
    waitstarttime = keyfpstime
    while nocoConnectInfo(0) <= MAX_CHILDREN 
	    if keyfpstime - waitstarttime >= 10000{
	    	dialog "子プロセス起動失敗"
	    	end
	    }
    	title "サブプロセス起動待機中" + MAX_CHILDREN + " -> " + nocoConnectInfo()
    	await 16
    wend
    title "サブプロセス起動完了"
    
    update_child_list

    
    // 自動受信設定と受信コールバック関数の設定
    nocoAutoCopyData

	return


#deffunc update_child_list
    new_child_count = 0
    dim temp_child_hwnd, MAX_CHILDREN
    sdim temp_child_status, 64, MAX_CHILDREN

    // なごコネに参加している全てのアプリ数を取得
    total_connected_apps = nocoConnectInfo(0, 0)


	//終了された子プロセスをリストから除外
    for i,, new_child_count
		this = child_hwnd_list(i)
		exist_hwnd = 0
		repeat total_connected_apps
			if nocoConnectInfo(1, cnt) == this{
				exist_hwnd = 1
				break
			}
		loop
		if exist_hwnd == 0{
			new_child_count--
			child_hwnd(i) = child_hwnd(new_child_count)
			i--
		}
    next

    //新たに生成されたプロセスを登録
    repeat total_connected_apps
        connected_hwnd = nocoConnectInfo(1, cnt)
        if connected_hwnd == hwnd: continue
        
        // 新しいリストに追加
        if (new_child_count <= MAX_CHILDREN) {

            
			found_index = find_child_by_hwnd(child_hwnd_list, connected_hwnd) //このhwndが既存のリストのどこにあるか？
			if found_index == -1{
            	temp_child_status(new_child_count) = "初期状態"
            	
            }else{
				temp_child_status(new_child_count) = child_status_list(found_index)
           	}
           	
            temp_child_hwnd(new_child_count) = connected_hwnd
            
            new_child_count++
            
        } else {
            logmes "警告: 検出された子プロセスがMAX_CHILDRENを超えました。一部を無視します。"
            break // 配列の容量を超えたらループを抜ける
        }
        
    loop

    // 新しいリストを現在のリストにコピー
    
    dim child_hwnd_list, new_child_count
    dim child_status_list, new_child_count
    repeat new_child_count
        child_hwnd_list(cnt) = temp_child_hwnd(cnt)
        child_status_list(cnt) = temp_child_status(cnt)
    loop

	if child_count_current != new_child_count{
		  child_count_current = new_child_count
		  //変更通知
		  repeat child_count_current
		  	nocoSendCopyData child_hwnd_list(cnt), child_count_current, 子プロセス数, 4
		  loop
	}

    return

*on_copydata //毎フレーム呼び出す

    repeat nocoCopyDataQueueCount()
    
    	nocoGetCopyDataQueue received_data, cnt
    	sender_hwnd = nocoCopyDataQueueInfo(2, cnt)
		param = nocoCopyDataQueueInfo(3, cnt)
		data_size = nocoCopyDataQueueInfo(4, cnt)

		switch param
		case 検索結果
		
			result_num = (data_size - HEADER_SIZE) / RECORD_SIZE
			nowpointer = HEADER_SIZE

			
			repeat result_num
			
				memcpy tmp_filename, received_data,  64, 0, nowpointer + OFFSET_KIFU
				memcpy tmp_path, received_data, INFO_SIZE, 0, nowpointer + OFFSET_PATH
				add_item kifulist.matchlist, tmp_filename
				push_item_data kifulist.matchlist, stat, tmp_path
				nowpointer += RECORD_SIZE
				
			loop
	
			set_g_label g_label.1, "検索中 -> (" + get_list_item_num(kifulist.matchlist) + ")件"//ラベル更新

			complate_count++
			logmes "result_num = " + result_num + " : " + complate_count
			if complate_count == MAX_CHILDREN{
				complate_count = -1
				release_id search_id_manager, lpeek(received_data)
				logmes "検索完了"
				if filter_on{
					gosub　*filtering_and_make_listbox
				}
				gosub*search_finish
			}

		swbreak
		swend
   	loop
   	
    nocoClearQueue
    return


#module
// 子プロセスのハンドルを検索し、そのインデックスを返す
// 見つからない場合は -1 を返す
#defcfunc find_child_by_hwnd array h_array, int search_hwnd
    result = -1
    repeat length(h_array)
        if (h_array(cnt) == search_hwnd) {
            result = cnt
            break
        }
    loop
    return result

#global
*lab_sort1_asc
	g_listbox_sort_by_text kifulist, LISTBOX_SORT_ASC
	return
*lab_sort1_desc
	g_listbox_sort_by_text kifulist, LISTBOX_SORT_DESC
	return
*lab_sort1_shuffle
	g_listbox_shuffle kifulist
	return
*lab_sort2_asc
	g_listbox_sort_by_text kifulist.matchlist, LISTBOX_SORT_ASC
	return
*lab_sort2_desc
	g_listbox_sort_by_text kifulist.matchlist, LISTBOX_SORT_DESC
	return
*lab_sort2_shuffle
	g_listbox_shuffle kifulist.matchlist
	return
*save_info //終了処理
	notesel setting_str

	noteadd_ save_window_status.0, LINE_WINDOW_POSITION_X //ウィンドウ位置
	noteadd_ save_window_status.1, LINE_WINDOW_POSITION_Y
	noteadd_ save_window_status.2, LINE_WINDOW_SIZE_X //ウィンドウサイズ
	noteadd_ save_window_status.3, LINE_WINDOW_SIZE_Y
	noteadd_ max_depth, LINE_MAX_DEPTH //最大探索深度
	noteadd_ enableColorFlip, LINE_COLORFLIP //色反転を有効にするか
	noteadd_ view_hosi, LINE_VIEW_HOSI //星表示
	noteadd_ last_move_mark, LINE_LAST_MOVE_MARK //最終手表示
	noteadd_ kifu_start_num, LINE_KIFU_START_NUM //棋譜開始手数
	noteadd_ auto_interval, LINE_AUTO_INTERVAL //自動再生間隔
	noteadd_ alpha_interval, LINE_ALPHA_INTERVAL //形勢変化率による自動再生間隔の変化
	noteadd_ m_interval, LINE_M_INTERVAL //マンハッタン距離による自動再生間隔の変化
	noteadd_ auto_download, LINE_AUTO_DOWNLOAD_TIME //自動ダウンロード
	noteadd_ MAX_CHILDREN, LINE_PROCESS_COUNT //子プロセス数
	noteadd_ child_target_wait, LINE_TARGET_WAIT
	IsZoomed hwnd: noteadd_ stat, LINE_MAXIMIZED //ウィンドウ最大化状態
	chdir subdir
	notesave SETTING_FILE_NAME
	save_load_manager_save //グリッド情報保存
	end

