#ifndef search
#include "basic.hsp" //タイマー -> ( keyfpstime )キュー関連-> ( ringbuffer_count, init_ringbuffer, r_push, r_shift ) //ハッシュ関連-> ( get_value, new_value, NOT_DEFINED_HASH )
#include "modules/sgf.hsp" //sgf関連-> ( load_sgf, get_SGF_childs, get_board_size_from_SGF, get_property_coordinate_cash)
#include "modules/search/pattern.hsp" //パターン関連-> (get_pattern_all_groups_num, make_rotate_patterns, PATTERN_BLACK, PATTERN_WHITE, PATTERN_ZERO)

#module 検索

//探索時、キューに入れるノードの情報を定義
//ノード固有情報
#const NODE_INFO_NUM 3
#const NODE_INFO_SIZE NODE_INFO_NUM * 4

//ノードが持つ有効なパターンリストの各要素の意味を定義
#enum FLIP_INFO = 0　　     //色反転
#enum ROTATE_INFO           //回転
#enum MATCH_GROUP_COUNT     //マッチしたグループの数
#enum NOT_YET_MATCHED_FLAGS //まだマッチしていないグループフラグ
#enum TEJUN                 //通過済みの手数

#enum VLIST_ELEMENT_NUM //要素の数

#const VLIST_ELEMENT_SIZE VLIST_ELEMENT_NUM * 4 //パターンが持つサイズ
#const VLIST_MAX 8 * 2 //回転、色反転で１６種類

#const VLIST_SIZE VLIST_ELEMENT_SIZE * VLIST_MAX //全体のパターンサイズ

//最終的なノードサイズ
#const DATA_SIZE NODE_INFO_SIZE + VLIST_SIZE


#deffunc search_init
	dim vlist , VLIST_ELEMENT_NUM, VLIST_MAX //探索時ノードが持つ有効なパターンリスト（これがなくなってしまうと検索失敗となる）
	init_ringbuffer DATA_SIZE, 128           //キュー初期化（自動拡張付き）
	sdim node_data, DATA_SIZE　              //データを纏めてキューに出し入れするための媒介変数
	return

#defcfunc search str SGF_list, array result, int max_depth, int colorflip, int kifu_update, var loadmax, int inverse, var h

	group_num = get_pattern_all_groups_num() //パターンのhitと判定するために判定に必要な数を取得
	logmes "group_num = " + group_num
	if group_num == 0: return -1
	if group_num > max_depth: return -2

	colorflip_num = 1 + colorflip // (0-1)を(1-2)で扱う
	
	最大の深さ = 50
	if max_depth{
		最大の深さ = max_depth
	}
	rn = 0
	prexy = -1, -1
	
	logmes "探索を開始します-> 必要なヒット数 = " + group_num
	
	notesel ss
		ss = SGF_list

		検索棋譜数 = notemax * loadmax / 100
		logmes "検索棋譜数 = " + 検索棋譜数　+ "loadmax = " + loadmax
	
		titlestr = ""
	
		starttime = keyfpstime
	
		if kifu_update{		
			repeat 検索棋譜数, get_entry_count(h) //SGF_listを単純に順番に読み込んでいるため、将来SGF_LISTをソートするようなことがあれば変更必要
				noteget sgf_filename, cnt
				if sgf_filename == "": break
				if get_value(h, sgf_filename) == NOT_DEFINED_HASH{
					notesel sgf
						noteload sgf_filename
					noteunsel
					topnode = load_sgf(sgf)
					new_value h, sgf_filename, str(topnode)
					await
					titlestr = "棋譜読み込み中 -> "+ (cnt+1) * 100 / notemax + "%"
					getkey key, 27
					if key: break
					title titlestr + "... 【ESC】-> 読み込み済み棋譜をすぐに検索"
				}
			loop
		}
	
		titlestr += strf("(%dms) -> 検索開始 -> ", keyfpstime - starttime)
		title titlestr
		
		starttime = keyfpstime
		repeat get_keys(h, key)

			topnode = int(get_value(h,key(cnt)))
			
			get_board_size_from_SGF topnode, xy
	
			//前回検索した棋譜とボードサイズが違う場合
			if prexy != xy || prexy.1 != xy.1{
				//新たなパターンを生成
				make_rotate_patterns xy, xy.1
				get_pattern rotated_color, rotated_group, rotated_tejun
				prexy = xy,xy.1
				//回転パターン数
				r_pattern_num = 4 << (xy == xy.1)
				
			}
			
			//検索実行
			
			match_node = search_main(topnode)
			
			if (inverse == 0 && match_node >= 0) || (inverse != 0 && match_node < 0){
				result(0, rn) = key(cnt) //一致したSGFを結果に追加
				if inverse{
					result(1, rn) = str(topnode)
				}else{
					result(1, rn) = str(stat)
				}
				rn++
			}
			
		loop
	noteunsel

	title titlestr + strf("検索完了 %d件 (%dms)", rn, keyfpstime - starttime)
	return rn




#defcfunc search_main int t
/*
  t:
  - 検索開始のノード番号
  
  return_value -> マッチしたノード番号、マッチしない場合 -1
*/

  //パターンリスト初期化
  valid_pattern_count = 0
  repeat r_pattern_num
    for i,, colorflip_num
      vlist(FLIP_INFO, valid_pattern_count) = i
      vlist(ROTATE_INFO, valid_pattern_count) = cnt
      vlist(MATCH_GROUP_COUNT, valid_pattern_count) = 0
      vlist(NOT_YET_MATCHED_FLAGS, valid_pattern_count) = (8 | 4 | 2 | 1)
      vlist(TEJUN, valid_pattern_count) = 0 
      valid_pattern_count++
    next
  loop

  //初期ノード登録
  lpoke node_data, , 0         //現在の深さ(手数)
  lpoke node_data, 4, t         //開始ノード番号
  lpoke node_data, 8, valid_pattern_count //有効なパターン数
  memcpy node_data, vlist, VLIST_SIZE, NODE_INFO_SIZE
  r_push node_data

  //探索開始
  *next_node
  while ringbuffer_count

    r_shift node_data //キューからノードデータを復元

    //ノードデータ展開
    depth = lpeek(node_data) : if depth > 最大の深さ: _continue
    node = lpeek(node_data, 4)
    valid_pattern_count = lpeek(node_data, 8)
    memcpy vlist  , node_data, VLIST_SIZE, , NODE_INFO_SIZE

    turn = get_property_coordinate_cash(node, x, y) //ノードの手番、座標を取得

    //turn == 1 -> 黒番
    //turn == 2 -> 白番

    if x >= 0{

      for i,, valid_pattern_count

        *check_pattern_list

        pt = rotated_color(x, y, vlist(ROTATE_INFO, i))
        
        if pt == PATTERN_ZERO: _continue

        assert pt >= 1 && pt <= 6

        //色判定
        hit = 0
       	if turn == 1 + vlist(FLIP_INFO, i){
			if pt & PATTERN_BLACK: hit = 1
	    }else: if pt & PATTERN_WHITE: hit = 1
		
        if hit{ //色が一致

	        //グループチェック
            rg = rotated_group(x, y, vlist(ROTATE_INFO, i))
            if (vlist(NOT_YET_MATCHED_FLAGS, i) & rg) == rg{ //全てグループがヒットしていないチェック
		        
				if rg{
					repeat 4 ; // グループA-D（最大4つ）を順にチェックする
					    bit = 1 << cnt ; // 今回チェックするグループのビット（1, 2, 4, 8）
					    if (rg & bit){
					        vlist(NOT_YET_MATCHED_FLAGS, i) -= bit ; // そのグループはもうヒット済みにする（ビットOFF）
					        vlist(MATCH_GROUP_COUNT, i)++
					    }
					loop
				}else{
					if (pt & PATTERN_NONE) == 0{
						vlist(MATCH_GROUP_COUNT, i)++ ; // 通常石
					}
				}


	            if vlist(MATCH_GROUP_COUNT, i) <= group_num{
		            
		        	//最終チェック（手順）
		            rt = rotated_tejun(x, y, vlist(ROTATE_INFO, i))
		            if rt{
			            //手順が指定されている
			            if rt < vlist(TEJUN, i){
				            //手順が逆流したのでアウト
				            goto *out
				        }
			            vlist(TEJUN, i) = rt
			        }

		           	if vlist(MATCH_GROUP_COUNT, i) == group_num{
	           		   return node //検索成功
				    }else{
		            	_continue //検索続行（着手自体はマッチしたが、必要なhit数に届いていない)
		            }
		            
		       	}else{
			       	//オーバーカウントしたのでアウト
			    }
        	}else{
	        	//なんらかのグループに二回目のヒットなのでアウト
	        }
        }else{
	        //色が違うのでアウト
	    }
	    
		*out //このパターンを削除します

        valid_pattern_count--
        
        if i == valid_pattern_count{
        	  //有効パターンリストを全て探索した。
        	if valid_pattern_count{
            	//まだ有効リストが残っているので、子ノードを積みに行く
				_break
          	}
         	 //有効なパターンがなくなった。  ＝  このノードは可能性がなくなった。
          	goto *next_node
        }
        //今の位置をパターンリストの末尾要素で置き換えて再探索
        memcpy vlist(0, i), vlist(0, valid_pattern_count), VLIST_ELEMENT_SIZE
        goto *check_pattern_list

      next
    }
    repeat get_SGF_childs(node, child)
      lpoke node_data,  , depth + 1
      lpoke node_data, 4, lpeek(child, cnt * 4)
      lpoke node_data, 8, valid_pattern_count
      memcpy node_data, vlist, VLIST_SIZE, NODE_INFO_SIZE
      r_push node_data
    loop
    
  wend
  return -1

#global
search_init
#endif