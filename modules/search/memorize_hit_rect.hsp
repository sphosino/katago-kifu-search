#ifndef memorize_hit_rect
#module

#const MAX_BOARD_SIZE 26
#const UNMEMORIZED -9999

#deffunc init_mem int p1
	dim memory, 8, MAX_BOARD_SIZE, MAX_BOARD_SIZE
	dim minus , 8, MAX_BOARD_SIZE, MAX_BOARD_SIZE
	for i,,MAX_BOARD_SIZE
		for j,,MAX_BOARD_SIZE
			for k,,8
				minus(k,i,j) = UNMEMORIZED
			next
		next
	next
	
	minus_size = varsize(minus)
	memsize = varsize(mem)
	clear_mem
	return
#deffunc clear_mem
	logmes "clear_mem called"
	memcpy memory, minus, minus_size
	return


#defcfunc memorize_hit_mask int rotate_pattern, int x, int y, array mask, int boardsize_x

	if memory(rotate_pattern, x, y) == UNMEMORIZED{
		bsizex = boardsize_x
		if bsizex = 0: bsizex = 19
		bit = (y * bsizex + x) * 2
		int_index = bit / 32
		bitoffset = bit \ 32
		memory(rotate_pattern, x, y) = (mask(int_index, rotate_pattern) >> bitoffset & 3) != 0
	}

	return memory(rotate_pattern, x, y)
#global
init_mem 360
#endif
