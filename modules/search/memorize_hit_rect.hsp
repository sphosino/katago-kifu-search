#ifndef memorize_hit_rect
#module

#const MAX_BOARD_SIZE 26
#const UNMEMORIZED -9999

#defcfunc memorize_hit_rect int rotate_pattern, int x, int y, array pattern, var v
	if memory(0,rotate_pattern, x, y) == UNMEMORIZED{
		memory(0,rotate_pattern, x, y) = -1, -1
		for j,, length(pattern)
			split pattern(j, 0, 0, rotate_pattern),",", rect
			if in_rect(rect, x, y){
				memory(0,rotate_pattern, x, y) = j
				split pattern(j, 1, 0, rotate_pattern),"-", stones
				e = stat
				for i,,e
					split stones(i), ":", tmp
					p_x = int(tmp)
					p_y = int(tmp.1)
					if (p_x == x): if(p_y == y){
						memory(1,rotate_pattern,x,y) = i
						_break
					}
				next
				_break
			}
		next
	}
	v = memory(1,rotate_pattern,x,y)
	return memory(0,rotate_pattern, x, y)
	
#defcfunc local in_rect array a, int x, int y
	return (int(a) <= x) && (int(a(1)) <= y) && (int(a(2)) >= x) && (int(a(3)) >= y)

#deffunc init_mem int p1
	dim memory,2, 8, MAX_BOARD_SIZE, MAX_BOARD_SIZE
	dim minus ,2, 8, MAX_BOARD_SIZE, MAX_BOARD_SIZE
	for i,,MAX_BOARD_SIZE
		for j,,MAX_BOARD_SIZE
			for k,,8
				minus(0, k,i,j) = UNMEMORIZED,UNMEMORIZED
			next
		next
	next
	
	dim emem, 25, 16, p1, 2
	dim mem , 25, 16, p1, 2
	repeat length(emem)
		a = cnt
		repeat length2(emem)
			b = cnt
			repeat length3(emem)
				c = cnt
				repeat length4(emem)
					emem(a,b,c,cnt) = UNMEMORIZED
				loop
			loop
		loop
	loop
	minus_size = varsize(minus)
	memsize = varsize(mem)
	clear_mem
	return
#deffunc clear_mem
	logmes "clear_mem called"
	memcpy memory, minus, minus_size
	memcpy mem,emem,memsize
	return

#define global ctype memorize_hit_color(%1,%2,%3,%4,%5, %6) _memorize_hit_color(%1,%2,%3,%4,%5 - 1, %6)
#defcfunc _memorize_hit_color int rect_number, int color_pattern, int rotate_pattern, int stone_num, int turn, array pattern

//turn -> 0: çïî‘   1: îíî‘
#define memdef mem(rect_number, color_pattern << 3 | rotate_pattern, stone_num, turn)

assert rotate_pattern >= 0 && rotate_pattern <= 7 && stone_num >= 0 && (turn == 0 || turn == 1) && color_pattern >= 0 && color_pattern < 16 
if memdef == UNMEMORIZED{
	memdef = 0
	split pattern(rect_number, 1, color_pattern, rotate_pattern),"-", stones
	split stones(stone_num), ":", stone_info
	p = int(stone_info.2)

	
	if turn == 0{

		if PATTERN_BLACK & p{
			memdef = 2 | ((PATTERN_NONE & p) == 0)
		}
		
	}else{
		
		if PATTERN_WHITE & p{
			memdef = 2 | ((PATTERN_NONE & p) == 0)
		}
		
	}
}
return memdef

#defcfunc memorize_hit_mask int rotate_pattern, int x, int y, array mask, int boardsize_x

	if memory(0,rotate_pattern, x, y) == UNMEMORIZED{
		bsizex = boardsize_x
		if bsizex = 0: bsizex = 19
		bit = (y * bsizex + x) * 2
		int_index = bit / 32
		bitoffset = bit \ 32
		memory(0,rotate_pattern, x, y) = (mask(int_index, rotate_pattern) >> bitoffset & 3) != 0
	}

	return memory(0,rotate_pattern, x, y)
#global
init_mem 360
#endif
