#ifndef sgf_node
#include "bitboard.hsp"
#module sgf_node

#define KEY_VALUE_SEP "|||"

#define TOPNODE_SIZE 243   ; katago_rating_gamesの棋譜では(241) 
#define NORMALNODE_SIZE 28 ; katago_rating_gamesの棋譜では(27)

#deffunc init_sgf_module int 棋譜数, int node_size

	MAX_NODE = 棋譜数 * 210 //棋譜当たりの大体の平均手数(実測208)ぐらい
	if node_size == 0{
		init_memory_pool MAX_NODE * 38, MAX_NODE * 2 //ノード当たりの大体のバイト数　、　ノード当たり２ブロック利用
	}else{
		init_memory_pool MAX_NODE * node_size, MAX_NODE * 2
	}
	init_bitboard MAX_NODE //ビットボードモジュールの初期化

	//ビットボードIDの発行・管理用
	dim bitboard_id, MAX_NODE	
	dim node_to_bitboard_used_list, MAX_NODE
	dim bitboard_id_manager
	newmod bitboard_id_manager, id_manager, MAX_NODE

	dim parent, MAX_NODE //親ノード
	
	dim using, MAX_NODE //使用中かフラグ
	
	dim sgf_node_turn, MAX_NODE //ノードの手番
	dim sgf_node_x, MAX_NODE //ノードの座標ｘ
	dim sgf_node_y, MAX_NODE //ノードの座標ｙ
	
	dim sgf_properties_data, MAX_NODE //メモリブロック番号
    dim sgf_properties_num, MAX_NODE //その他のプロパティの数
    dim sgf_node_childs, MAX_NODE //メモリブロック番号
    dim child_num, MAX_NODE //子ノードの数
	
	//一時コピー用
	sdim child, 128 ; 子ノード　
	sdim block_data, 1024 ; プロパティデータ　

	SEP = " "
	poke SEP, 0, $1F

    list_props = ",AB,AW,AE,TR,SQ,CR,LB,TB,TW,MA,SL,"
    text_props = ",C,N,GC,DM,GB,GW,HO,US,VW,"
    sdim kv,,2 //プロパティ名、値の一時変数

	return

#deffunc local init_node int node_id, int p1, int p2, local c
	parent(node_id) = p1
	sgf_node_turn(node_id) = -1
	sgf_node_x(node_id) = -1
	sgf_node_y(node_id) = -1
	node_to_bitboard_used_list(node_id) = 0

	if length(using) <= node_id{
		using(node_id) = 0
	}
	if using(node_id){
		release_bitboard node_id
		free_block sgf_properties_data(node_id)
		free_block sgf_node_childs(node_id)
		using(node_id) = 1
	}

	//SEPで始まりSEPで終わる形式で保存 (splitしたら、先頭と末尾は空になることに注意)
	
	sgf_properties_data(node_id) = get_new_block(1 + p2)
	re_write_mem_str stat, SEP
	sgf_properties_num(node_id) = 0
	
	//子ノードリスト初期化
	sgf_node_childs(node_id) = get_new_block(4) ;最初は１つ分だけ確保
	child_num(node_id) = 0

	return

#defcfunc make_new_SGFnode int p1, int p2
	if open_id_list_num{
		open_id_list_num--
		new_id = lpeek(open_id_list, open_id_list_num * 4)
	}else{
		new_id = node_count
		node_count++
	}

	init_node new_id, p1, p2
	
	return new_id

#deffunc add_sgf_property int node_id, str key, str value

	append_str sgf_properties_data(node_id), key + KEY_VALUE_SEP + value + SEP
	sgf_properties_num(node_id)++
	
	return
	
#deffunc del_sgf_property int node_id, str key

	//文字列ブロックを読み出す
	data = read_mem_str(sgf_properties_data(node_id))
	
	//対象プロパティの開始位置を探す
	index = instr(data, 0, SEP + key + KEY_VALUE_SEP)
	if index == -1: return

	//次のSEPまでさがす
	next_index = instr(data, index + 1, SEP)
	assert next_index >= 0

	left = strmid(data, 0, index)

	re_write_mem_str sgf_properties_data(node_id), left + strmid(data, next_index, $FFFFFFF)
	sgf_properties_num(node_id)--
	return

#deffunc del_add_sgf_property int node_id, str key, str value

	//文字列ブロックを読み出す
	data = read_mem_str(sgf_properties_data(node_id))
	
	//対象プロパティの開始位置を探す
	index = instr(data, 0, SEP + key + KEY_VALUE_SEP)
	if index == -1{
		//見つからなかったら末尾に追加
		write_mem_str sgf_properties_data(node_id), key + KEY_VALUE_SEP + value + SEP, strlen(data)
		sgf_properties_num(node_id)++
	}else{
		//次のSEPまでさがす
		next_index = instr(data, index + 1, SEP)
		assert next_index >= 0
		left = strmid(data, 0, index)
		re_write_mem_str sgf_properties_data(node_id), left + strmid(data, next_index, $FFFFFFF) + key + KEY_VALUE_SEP + value + SEP
	}
	
	return

#deffunc add_SGFchild int node_id, int p1
    if search_SGFchild(node_id, p1) == -1 {
        Lpoke_block sgf_node_childs(node_id), p1, child_num(node_id) * 4
        child_num(node_id)++
    }
    return

#deffunc del_sgf_node int node_id, int flag, local child_block, local i, local num
	if using(node_id) == 0: return
	if flag{
		num = get_sgf_childs(node_id,child_block)
		for i,,num
			del_sgf_node lpeek(child_block, i * 4) , 1
		next
	}
	release_bitboard node_id
	free_block sgf_properties_data(node_id)
	free_block sgf_node_childs(node_id)
	using(node_id) = 0
	return

#deffunc set_property_move int node_id, int turn, int x, int y
	sgf_node_turn(node_id) = turn
	sgf_node_x(node_id) = x
	sgf_node_y(node_id) = y
	return
	
#deffunc set_property_data int node_id, str key, str value
	if key == "B"{
		tmp = value
		set_property_move node_id, 1, peek(tmp, 0) - 'a', peek(tmp, 1) - 'a'
	}else: if key == "W"{
		tmp = value
		set_property_move node_id, 2, peek(tmp, 0) - 'a', peek(tmp, 1) - 'a'
	}else{
		//登録（重複しないよう削除してから登録）
		del_add_sgf_property node_id, key, value
	}
	return

#defcfunc get_property_data int node_id, str property_name

	data = read_mem_str(sgf_properties_data(node_id))
	
	// プロパティの名前と値を探す
	index = instr(data, 0, SEP + property_name + KEY_VALUE_SEP)
	if index == -1: return ""  // 見つからなかった場合は空文字を返す
	
	// データの最後までのインデックスを取得
	next_index = index + 1 + instr(data, index + 1, SEP) //最後のSEPは必ず存在する事はモジュール全体で保証。
	
	value_start = index + 1 + strlen(property_name) + strlen(KEY_VALUE_SEP) //+1はstrlen(SEP)
	value_end = next_index

	// プロパティの値を抽出して返す
	result = strmid(data, value_start, value_end - value_start)
	
	return result

#defcfunc get_property_coordinate_cash int node_id, var x, var y
	x = sgf_node_x(node_id)
	y = sgf_node_y(node_id)
	return sgf_node_turn(node_id)

#defcfunc get_SGF_childs int node_id, var a
	copy_block sgf_node_childs(node_id), a
	return child_num(node_id)

#defcfunc search_SGFchild int node_id, int target
	sdim child
	result = -1
    repeat get_sgf_childs(node_id, child)
        if lpeek(child, cnt * 4) == target{
	    	result = cnt
	    	break
	    }
    loop
    return result

#defcfunc search_SGFchild_byxy int node_id, int _x, int _y, int turn, local child_block
	sdim child_block

	result = -1
	repeat get_SGF_childs(node_id, child_block)
		if turn == get_property_coordinate_cash(lpeek(child_block, cnt * 4), x, y){
			if _x == x && _y == y{
				result = lpeek(child_block, cnt * 4): break
			}
		}
	loop
	
	return result


#defcfunc get_node_sgf int p1
	result = "("
	_get_node_sgf p1, result
	result += ")"
	return result

#deffunc _get_node_sgf int node_id, var s, local i, local n, local child_block

	s += ";"
	
	if sgf_node_turn(node_id) != -1{
		座標 = "  "
		poke 座標, 0, 'a' + sgf_node_x(node_id)
		poke 座標, 1, 'a' + sgf_node_y(node_id)
		
		if sgf_node_turn(node_id) == 1{
			s += "B[" + 座標 + "]"
		}else{
			s += "W[" + 座標 + "]"
		}
	}

	block_data = read_mem_str(sgf_properties_data(node_id))
	split block_data, SEP, tmp
	repeat sgf_properties_num(node_id), 1
		split tmp(cnt), KEY_VALUE_SEP, kv
		if is_list_property(kv){
			s += kv
			repeat strlen(kv.1) / 2
				s += "[" + strmid(kv.1,cnt*2,2) + "]"
			loop
		}else{
			s += kv + "[" + kv.1 + "]"
		}
	loop

	sdim child_block
	n = get_SGF_childs(node_id, child_block)
	for i,, n
	
		if n >= 2{
			s+="("
		}
		
		_get_node_sgf lpeek(child_block, i * 4), s
		
		if n >= 2{
			s+=")"
		}
	next
	return

#deffunc get_nodelist int node_id, array a
	dim a
	_get_nodelist node_id, a
	return
#deffunc _get_nodelist int node_id, array a, int num
	a(num) = node_id
	if parent(node_id) != -1{
		_get_nodelist parent(node_id), a, num + 1
	}
	return

//特定のノードまでのSGFを取得
#defcfunc get_node_sgf_nowpoint int p1, local i
	get_nodelist p1, nodelist
	result = "("
	for i, length(nodelist)-1,-1,-1
		result += get_node_sgf_nowpoint_main(nodelist(i))
	next
	result += ")"
	return result
	
#defcfunc get_node_sgf_nowpoint_main int node_id, local i
	i = ";"
	if sgf_node_turn(node_id) != -1{
		座標 = "  "
		poke 座標, 0, 'a' + sgf_node_x(node_id)
		poke 座標, 1, 'a' + sgf_node_y(node_id)
		if sgf_node_turn(node_id) == 1{
			i += "B[" + 座標 + "]"
		}else{
			i += "W[" + 座標 + "]"
		}	
	}
	
	block_data = read_mem_str(sgf_properties_data)
	split block_data, SEP, tmp
	
	repeat sgf_properties_num(node_id), 1
		split tmp(cnt), KEY_VALUE_SEP, kv
		if is_list_property(kv){
			i += kv
			repeat strlen(kv.1)/2
				i += "[" + strmid(kv.1,cnt*2,2) + "]"
			loop
		}else{
			i += kv + "[" + kv.1 + "]"
		}
	loop
	return i

#deffunc get_board_size_from_SGF int SGF_topnode, array xy

	size = get_property_data(SGF_topnode, "SZ")
	if size == ""{
		logmes "SGFにボードサイズが設定されていません"
		xy = 19,19
	}else{
		split size,":", x, y
		if stat = 1: y = x
		xy = int(x), int(y)
	}
	return
#defcfunc fetch_or_create_SGFnode int nownode, array coordinate, int 手番

	if nownode >= 0{
		if search_SGFchild_byxy(nownode, coordinate, coordinate.1 , 手番) >= 0{
			return stat //すでにノードが存在
		}
	}
	
	new = make_new_SGFnode(nownode, TOPNODE_SIZE)
	
	if nownode >= 0{
		add_SGFchild nownode, new
	}
	
	set_property_move new, 手番, coordinate, coordinate.1
		
	return new

#defcfunc get_bitboard int node_id, local parent_id
    if node_to_bitboard_used_list(node_id) == 0 {

        parent_id = parent(node_id)

        if parent_id == -1 {
            get_board_size_from_SGF node_id, size
            if (size(0) == 0) | (size(1) == 0) {
                board_id = make_new_bitboard(19, 19)
            } else {
                board_id = make_new_bitboard(size(0), size(1))
            }
        } else {
            board_id = copy_bitboard(get_bitboard(parent_id))
        }

        turn = sgf_node_turn(node_id)
        x = sgf_node_x(node_id)
        y = sgf_node_y(node_id)
        if x >= 0 {
            if play_move(board_id, x, y, turn) < 0 {
                logmes "着手失敗: node=" + node_id + " x=" + x + " y=" + y + " turn=" + turn
            }
        }

        id = get_new_id(bitboard_id_manager)
        bitboard_id(id) = board_id
        node_to_bitboard_used_list(node_id) = id + 1 

        ; if rnd(30) == 0: logmes "bitboard作成: node=" + node_id + ", board_id=" + board_id + ", id=" + id
    }
	return node_to_bitboard_used_list(node_id) - 1

#deffunc release_bitboard int node_id
    id = node_to_bitboard_used_list(node_id) - 1
    if id >= 0 {
        del_bitboard bitboard_id(id)
        release_id bitboard_id_manager, id
        node_to_bitboard_used_list(node_id) = 0
        #ifdef _debug
			logmes "bitboard解放: node=" + node_id + ", id=" + id
			await
		#endif
    }
    return
    
#defcfunc is_list_property str key
    // リスト型プロパティの判定
    return (instr(list_props, 0, "," + key + ",") >= 0)

#defcfunc is_text_property str key
    // テキスト型プロパティの判定
    return (instr(text_props, 0, "," + key + ",") >= 0)
    
//マージ処理

#defcfunc is_ancestor int target, int ancestor
    current = target
    while current != -1
        if current == ancestor : return 1
        current = parent(current)
    wend
    return 0
    
#defcfunc compare_nodes int node1, int node2
	if parent(node1) == -1 && parent(node2) == -1: return 1
    // ノードのプロパティ比較
    return (sgf_node_x(node1) == sgf_node_x(node2)) && (sgf_node_y(node1) == sgf_node_y(node2)) && (sgf_node_turn(node1) == sgf_node_turn(node2))
    
#defcfunc get_node_properties int node_id
    // ノード情報の文字列化
    return "(" + sgf_node_x(node_id) + "," + sgf_node_y(node_id) + ") " + sgf_node_turn(node_id)

#deffunc connect_sgf_node int parent_node_id, int child_node_id, local i
	if child_node_id == -1: return
	if parent_node_id == -1{
		parent(child_node_id) = -1
		return
	}
	
	//双方向循環参照チェック
	if is_ancestor(parent_node_id, child_node_id) || is_ancestor(child_node_id, parent_node_id){
        logmes "Error: Circular reference detected! parent=" + parent_node_id +"child=" + child_node_id
        return
    }

	sdim block_data, child_num(parent_node_id) * 4

    
    // プロパティベース重複チェック
    pnum = get_sgf_childs(parent_node_id,child_block)
    for i,, pnum
        current_child = lpeek(child_block, i*4)
        if compare_nodes(child_node_id, current_child) {
            logmes "Warning: Duplicate node. properties=" + get_node_properties(child_node_id)
            return
        }
    next

	//子ノード接続処理

	Lpoke_block sgf_node_childs(parent_node_id), child_node_id, child_num(parent_node_id) * 4 
	child_num(parent_node_id)++
	parent(child_node_id) = parent_node_id

	return
	
#deffunc copy_properties int node1, int node2
	if (node1 < 0) || (node2 < 0): return
	sgf_node_turn(node1) = sgf_node_turn(node2)
	sgf_node_x(node1) = sgf_node_x(node2)
	sgf_node_y(node1) = sgf_node_y(node2)

	re_write_mem_str sgf_properties_data(node1), read_mem_str(sgf_properties_data(node2))
	sgf_properties_num(node1) = sgf_properties_num(node2) //その他のプロパティの数
	
	return

#defcfunc deep_copy_sgf_node int node_id, local i, local num, local c, local new_node, local sn

	stack(sn) = node_id ;;コピー元
	stackp(sn) = -1 ;;新たなノードが所属すべき番号
	sn++
	result = -1
	while sn
		sn--
		nn = stack(sn)
		p = stackp(sn)
    	new_node = make_new_SGFnode(-1, NORMALNODE_SIZE) // 空ノードを作成
    	
    	if result = -1{
	    	result = new_node
	    }
  		copy_properties new_node, nn // 元のノードの情報をコピー
  		
 		connect_sgf_node p, new_node // ノード接続
 		
   		repeat get_sgf_childs(nn, child_block)
	    	stack(sn) = lpeek(child_block, cnt * 4)
	    	stackp(sn) = new_node
	    	sn++
      	loop
      	
    wend
    return result

#defcfunc has_child int node_id, int node_id2
	result = -1
	repeat get_SGF_childs(node_id, child_block)
		mes "" + lpeek(child_block, cnt * 4) + "   " + node_id2
		if compare_nodes(lpeek(child_block, cnt * 4), node_id2){
			result = lpeek(child_block, cnt * 4)
			mes "" + result + ":" + node_id2 + "  " + node_id 
			break
		}
	loop
	return result

#defcfunc merge_node array node_list, array topnode_list, int _merge_limit
	if vartype(node_list) != 2: return -1
	new = make_new_SGFnode(-1,TOPNODE_SIZE) //新たなトップノードを作成する
	dim topnode_list
	if _merge_limit{
		merge_limit = limit(_merge_limit,,length(node_list))
	}else{
		merge_limit = length(node_list)
	}
	notesel s
		repeat merge_limit
			noteload node_list(cnt)
			topnode_list(cnt) = _load_sgf(s, -1)
			logmes "loaded ->" + stat
			merge_node_main new, topnode_list(cnt) //マージ実行
			
			if cnt \ 10 == 9{//１０棋譜以上であればフィードバックつける。
				await 16
				title "マージ実行中 " + (cnt + 1) * 100 / merge_limit + "%完了 ESCで中断"
	
				getkey a, 27
				if a: break
				
			}
			await 1
		loop
	noteunsel
	return new

#deffunc merge_node_main int topnode1, int topnode2, local i, local c, local sn
	stack1(sn) = topnode1
	stack2(sn) = topnode2
	stack3(sn) = 0 //子ノード処理済みか
	sn++
	sdim c
	while sn
		sn--
		tn1 = stack1(sn)
		tn2 = stack2(sn)
		flag = stack3(sn)
		if flag = 0{
			stack3(sn) = 1
			sn++
			for i,,get_SGF_childs(tn2, c) //全ての子供をマージする
				tn2_child = lpeek(c, i * 4)
				if has_child(tn1, tn2_child) >= 0{ //共通ノード発見
					stack1(sn) = stat
					stack2(sn) = tn2_child
					stack3(sn) = 0
					sn++
				}else{
					connect_sgf_node tn1, tn2_child
				}
			next
		}else{
			merge_properties tn1, tn2 //棋譜情報をマージ
			del_sgf_node tn2
		}
	wend
	
	return
#deffunc merge_properties int node_id, int node_id2

	copy_properties node_id, node_id2
	
	return

//////////マージ処理ここまで/////////////////////////////////////////////////////////
	


#global

#module
#defcfunc 対応する文字まで取得 var ss, int index, str s1, var result
	i = instr(ss, index, s1)
	result = strmid(ss, index, i)
	return index + i
#global

;/*/
#module
#define global ctype load_sgf(%1, %2 = -1) _load_sgf(%1, %2)
#defcfunc _load_sgf str ss, int node

	sss = ss
	sgflen = strlen(sss)
	if sgflen < 3{
		//最小SGFは　(;)
		logmes "A"
		return -1
	}
	if (peek(sss) != '(') || (strmid(sss,-1,1) != ")"){
		logmes "B->" + strmid(sss,-1,1)
		return -1
	}
	start_point = instr(sss, 0 ,";")
	if start_point == -1{
		logmes "C"
		return -1
	}
	dim stack_count
	nc = 0
	MN = 0	//手数をカウントする独自プロパティ

	topnode = make_new_SGFnode(node,TOPNODE_SIZE)
	load_sgf_main strmid(sss, start_point + 1, sgflen - start_point - 2), topnode
	set_property_data topnode, "MN",str(lastnode)
	return topnode

#deffunc load_sgf_main str ss, int node
	sgfs = ss
	sgf_length = strlen(sgfs)
	nn = node
	point = 0
	//解析
	while point < sgf_length
		
		token = peek(sgfs, point)

		if (token == ';'){
			
			new_id = make_new_SGFnode(nn, NORMALNODE_SIZE)
			add_SGFchild nn, new_id
			nn = new_id
			nc++
			if MN < nc: MN = nc: lastnode = nn ; 一番深い位置を記録（これを手数として利用）
			
		}else:if token >= 'A' && token <= 'Z'{
			
			point = 対応する文字まで取得(sgfs, point, "[", P)
			point = 対応する文字まで取得(sgfs, point + 1, "]", D)

			set_property_data nn, P, D
			
		}else:if token == '['{
			
			point = 対応する文字まで取得(sgfs, point + 1, "]", D)
			set_property_data nn, P, get_property_data(nn, P) + D
			
		}else:if token = '('{
			
			stack(pn) = nn
			stack_count(pn) = nc
			pn++

		}else:if token == ')'{
			
			pn--
			nn = stack(pn)
			nc = stack_count(pn)
			
		}else{
			
			logmes "不正なトークンが含まれています"
			
		}
		point++
	wend
	return
#global

#endif