#ifndef hash_manager
#module hash_manager

#enum KEY = 0
#enum VALUE
#enum ENUM_MAX

#define global NOT_DEFINED_HASH "__undefined__"

#const MAX_KEYS 666667
#const FNV_PRIME 73091
#const SEED 72889

#const DEFAULT_DATA_SIZE 20000
    
#defcfunc local get_hash str s1

    s = SEED
    t = s1
    repeat strlen(t)
        s ^= peek(t, cnt) 
        s *= FNV_PRIME 
    loop
    return (s & 0x7FFFFFFF) \ MAX_KEYS
    
#deffunc init_hash_manager

	sdim data,, DEFAULT_DATA_SIZE, ENUM_MAX
	dim hashcount, MAX_KEYS
	dim hashtable, MAX_KEYS, 3 //同じハッシュ値は３個までに抑えるよう他を調整（自動拡張されるけど）
	dim data_deleted_list
	dim data_deleted_list_num

	#ifdef _debug
		e = 0
	#endif
	return

#deffunc new_value str s1, str s2

	hash = get_hash(s1)

	for i,, hashcount(hash)
		if data(hashtable(hash, i), KEY) == s1{
			data(hashtable(hash ,i), VALUE) = s2
			return 1
		}
	next

	if data_deleted_list_num{
		data_deleted_list_num--
		newid = data_deleted_list(data_deleted_list_num)
	}else{
		newid = データ数
		if newid >= length(data){
			data(newid * 2) = ""
		}
	}
	
	data(newid, KEY) = s1
	data(newid, VALUE) = s2
	hashtable(hash, hashcount(hash)) = newid
	hashcount(hash)++

	#ifdef _debug
		if hashcount(hash)>1{
			e++
			logmes "collision" + (hashcount(hash)-1) + ": hash= " + hash + ":  str = " + s1 + " count ->" + e
		}
	#endif
	
	データ数++

	return 1

#defcfunc get_value str s1

	hash = get_hash(s1)
	
	for i,,hashcount(hash)
		if data(hashtable(hash, i), KEY) == s1{
			return data(hashtable(hash, i), VALUE)
		}
	next

	return NOT_DEFINED_HASH

#deffunc del_value str s1

	hash = get_hash(s1)
	
	for i,, hashcount(hash)
	
		dup id, hashtable(hash, i)
		
		if data(id, KEY) == s1{
			
			data_deleted_list(data_deleted_list_num) == id
			data_deleted_list_num++

			hashcount(hash)--
			id = hashtable(hash, hashcount(hash))

			データ数--
			
			return
		}
	next
	
	return

#global
init_hash_manager
#endif
//-----------------------------------


//基本チェック
#if 0
	new_value "A","B"
	new_value "C","D"

	mes get_value("A")
	mes get_value("C")

	del_value "C"

	new_value "E","F"

	mes get_value("C")
	mes get_value("E")
#endif

//衝突チェック
#if 0

	#include "d3m.hsp"
	randomize
	start = d3timer()
	num = 6000
	repeat num
		sdim s
		repeat 7
			poke s,cnt,rnd(10) + '0'
		loop
		new_value s, "a"
	loop
	mes "" + num + "件の入力"
	mes "" + (d3timer()- start) + " ms"
	mes "衝突数=" + e@hash_manager
	

#endif