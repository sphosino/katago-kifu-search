#ifndef group_manager
#module group_manager

#const BOARD_X_MAX 100
#const BOARD_Y_MAX 100

#deffunc group_init
	group_str = "A","B","C","D" //４つまで指定できるようにする
	dim stone_map, BOARD_X_MAX, BOARD_Y_MAX, 4
	dim stone_map_count, BOARD_X_MAX, BOARD_Y_MAX
	sdim groups, 361, 4 //グループごとの位置を保存(xxyy, xxyy... )形式
	return
#deffunc group_draw int posx, int posy, int MAS_X, int MAS_Y, var board　 //碁盤が表示されている位置ｘ、ｙ、碁盤のマスの大きさx,y , 石の色（これによってグループ表示の文字色を変える）
	for i,,BOARD_X_MAX
		for j,,BOARD_Y_MAX
			repeat 4
				if stone_map(i,j, cnt){
					switch get_goban_position_color(board,i,j)
					case 0 ; 空点
						color 0,0,0
					swbreak
					case 1 ; 黒石
						color 255,255,255
					swbreak
					case 2 ; 白石
						color 0,0,0
					swbreak
					case 3 ; 灰色
						color 0,0,0
					swbreak
					case 4 ; ?つき黒
						color 255,255,255
					swbreak
					case 5 ; ?つき白
						color 0,0,0
					swbreak
					swend

					//centering_x = 文字を出来るだけ真ん中にしたくて、適当に ( MAS_Y / 6 )ベースで計算。
					// ※あとでフォントサイズやズラし量は定数化してもいいかも。
					if stone_map_count(i, j) >= 2{
						centering_x = MAS_Y / (6 * (cnt \ 2 + 1))
						font "", MAS_Y / 2
						pos posx + i * MAS_X + (cnt \ 2) * (MAS_X / 2) + centering_x, posy + j * MAS_Y + (cnt / 2) * (MAS_Y / 2)
					}else{
						font "", MAS_Y
						centering_x = MAS_Y / 6
						pos posx + i * MAS_X + centering_x, posy + j * MAS_Y
					}
					mes group_str(cnt)
				}
			loop
		next
	next
	return
#deffunc add_group_stone int x, int y, int group_num
	if group_num_validation(group_num){
		return
	}
    if stone_map(x, y, group_num) == 0{
 		stone_map(x, y, group_num) = 1
    	stone_map_count(x, y)++
    	groups(group_num) += strf("%02d%02d,",x,y)
	}
    
	return
#deffunc del_group_stone int x, int y, int group_num
	if group_num_validation(group_num){
		return
	}
	if stone_map(x, y, group_num){
		stone_map(x, y, group_num) = 0
		stone_map_count(x, y)--
		index = instr(groups(group_num),0,strf("%02d%02d",x,y))
		groups(group_num) = strmid(groups(group_num),0,index) + strmid(groups(group_num), index + 5, 65535)
	}
	return

#deffunc get_stones_by_group array a, int p1
	split groups(p1),",",tmp
	repeat stat - 1
		a(0,cnt) = 0 + strmid(tmp(cnt),0,2)
		a(1,cnt) = 0 + strmid(tmp(cnt),2,2)
	loop
	return
	
#defcfunc get_group_by_position int x, int y
	return stone_map(x, y, 3) << 3 | stone_map(x, y, 2) << 2 | stone_map(x, y, 1) << 1| stone_map(x, y, 0)

//回転に対応。検索前に作成して利用
#deffunc make_rotated_group array rotation_table, int board_size_x, int board_size_y
	is_square = (board_size_x == board_size_y)
	num_rotations = 4 << is_square //基本４パターン、正方形は８種類
	dim rotation_table, board_size_x, board_size_y, num_rotations 
	repeat length(groups)
		group_flag = 1 << cnt
		split groups(cnt),",", coordinate_list
		
		repeat stat
			coord_str = coordinate_list(cnt)
			if strlen(coord_str) < 4: continue
			original_x = int(strmid(coord_str,0,2))
			original_y = int(strmid(coord_str,2,2))
			
			repeat num_rotations
				rotate_coordinate xy, original_x, original_y, cnt, board_size_x, board_size_y
				rotation_table(xy, xy(1) , cnt) |= group_flag
			loop
		loop
	loop
	return

#deffunc clear_group int group_num
    if group_num_validation(group_num) {
        return
    }
    
    // グループに登録された座標を取得
    split groups(group_num), ",", tmp
    repeat stat
        xy = tmp(cnt)
        if strlen(xy) == 4 {
            x = int(strmid(xy, 0, 2))
            y = int(strmid(xy, 2, 2))
            if stone_map(x, y, group_num) {
                stone_map(x, y, group_num) = 0
                stone_map_count(x, y)--
            }
        }
    loop

    // グループデータをリセット
    groups(group_num) = ""
    
    return
#defcfunc group_num_validation int group_num
	invalid = group_num < 0 || group_num > 3
	if invalid{
		logmes "不正なグループ値です" + group_num
	}
	return invalid
#global
group_init
#endif

#if 0
add_group_stone 5,5, 0
add_group_stone 5,5, 1
add_group_stone 5,5, 2
add_group_stone 5,5, 3
add_group_stone 5,4, 0
add_group_stone 18,18,3

group_draw 0, 0,20,20

#endif