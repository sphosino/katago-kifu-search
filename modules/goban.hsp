#ifndef goban
#include "bitboard.hsp"
#addition "grid_system/area_grid_system.hsp"
#addition "grid_system/rboxf.hsp"

#const global 空点 0
#const global 黒番 1
#const global 白番 2

#module goban board, 手番, 黒が取った数, 白が取った数, コウ禁止点, 最後の着手,手数, stepboard, area_number, masx, masy, px, py
#modinit int x, int y, int p1, int p2, int _area
	dim board, x, y
	clear_board thismod
	masx = p1
	masy = p2
	stone_circle = 1 //石を楕円にしない
	area_number = _area
	return
#modfunc clear_board int x, int y
	if x == 0{
		dim board, length(board), length2(board)
		dim stepboard, length(board), length2(board)
	}else: if y == 0{
		dim board, x, x
		dim stepboard , x, x
	}else{
		dim board, x, y
		dim stepboard , x, y
	}
	黒が取った数 = 0
	白が取った数 = 0
	コウ禁止点 = -1,-1
	最後の着手 = -1,-1
	手番 = 黒番
	手数 = 0
	return
#modcfunc get_turn
	return 手番
#defcfunc get_turn_SGFstr int p1
	if p1 == 黒番: return "B"
	if p1 == 白番: return "W"
	return ;error
#modfunc toggle_turn
	if 手番 == 黒番: 手番 = 白番: return
	if 手番 == 白番: 手番 = 黒番
	return
#modcfunc get_手数
	return 手数
#modfunc 着手 int x, int y

	res = play_move_on_array(board, x, y, 手番, 黒が取った数,白が取った数, コウ禁止点,コウ禁止点.1)
	if res >= 0 | x < -1: toggle_turn thismod

	最後の着手 = x, y

	return res
	
#modfunc goban_getcapture array a
	a = 黒が取った数,白が取った数
	return



#modfunc 碁盤表示 int 碁石番号表示, int 最終手表示, int margin
	zz = 最終手表示
	thisrect thismod, r, area_number

	masx = limit((r.2 - r   - margin) / length(board),1)
	masy = limit((r.3 - r.1 - margin) / length2(board),1)

	if stone_circle == 1{
		if masx > masy: masx = masy
		if masy > masx: masy = masx
	}

	//エリアの中心に表示する
	px = r.0 + ( (r.2 - r.0 ) - masx *  length(board))  / 2
	py = r.1 + ( (r.3 - r.1 ) - masy * length2(board))  / 2
	
	//線描画

	color $cd,$85,$3f
	boxf px, py, px + length(board) * masx, py + length2(board) * masy
	color
	repeat length(board)
		line px + masx * cnt + masx / 2, py + masy/2, px + masx * cnt + masx/2, py + masy * length2(board) - masy/2 - 1
	loop
	repeat length2(board)
		line px + masx/2, py + masy * cnt + masy/2, px + masx * length(board) - masx/2 - 1, py + masy * cnt + masy/2
	loop


	//星描画
	if view_hosi{
		
		get_hosi length(board), length2(board), hosilist

		hosisizer = limit(masx / 8,3)
		repeat stat
	
			centerx = px + masx / 2 + masx * hosilist(0, cnt)
			centery = py + masy / 2 + masy * hosilist(1, cnt)
			x1 = centerx - hosisizer
			y1 = centery - hosisizer
			x2 = centerx + hosisizer
			y2 = centery + hosisizer
			
			circle x1, y1, x2, y2
			
		loop
	}

	//石描画

	repeat length(board): m= cnt
		repeat length2(board)
			posx = px + m   * masx
			posy = py + cnt * masy
			pos posx + 4, posy + 2

			//ボード描画
			switch board(m,cnt)
			case 黒番
				color
				circle posx, posy , posx + masx, posy + masy
				gosub*draw_last_move_mark
				if 碁石番号表示{
					color 210,210,210
					mes stepboard(m,cnt)
				}
			swbreak
			case 白番
				color 220,220,220
				circle posx, posy , posx + masx, posy + masy
				gosub*draw_last_move_mark
				if 碁石番号表示{
					color
					mes stepboard(m,cnt)
				}
			swbreak
			case 空点
				if (コウ禁止点 == m) : if (コウ禁止点.1 ==cnt): if 最終手表示{
					
					color 210,21,21
					circle posx + masx/4, posy + masy/4, posx + masx*3/4, posy + masy*3/4
					
				}
				if 碁石番号表示: if stepboard(m,cnt) > 0{
					color, 240
					mes stepboard(m,cnt)
				}
			swbreak
			case 3
				color 220/2,220/2,220/2
				circle posx, posy , posx + masx, posy + masy
				gosub*draw_last_move_mark
				if 碁石番号表示{
					color
					mes stepboard(m,cnt)
				}
			swbreak
			case 4
				color
				circle posx, posy , posx + masx, posy + masy

				gosub*draw_last_move_mark

				color 255
				offset = cos(deg2rad(45)) * masx / 2
				circle_centerx = posx + masx / 2
				circle_centery = posy + masx / 2
				line circle_centerx - offset, circle_centery - offset, circle_centerx + offset, circle_centery + offset
				line circle_centerx + offset, circle_centery - offset, circle_centerx - offset, circle_centery + offset
				
				if 碁石番号表示{
					color
					mes stepboard(m,cnt)
				}
			swbreak
			case 5
				color 220,220,220
				circle posx, posy , posx + masx, posy + masy

				色を設定 $000080
				offset = cos(deg2rad(45)) * masx / 2
				circle_centerx = posx + masx / 2
				circle_centery = posy + masx / 2
				line circle_centerx - offset, circle_centery - offset, circle_centerx + offset, circle_centery + offset
				line circle_centerx + offset, circle_centery - offset, circle_centerx - offset, circle_centery + offset
				
				gosub*draw_last_move_mark
				if 碁石番号表示{
					color
					mes stepboard(m,cnt)
				}
				
			swend
		loop
	loop

	return

#modfunc Draw_set_list_on_board var set_list

	repeat get_coordinates_set(set_list, sets)
		x = px + masx * strmid(sets(cnt), 0, 2)
		y = py + masy * strmid(sets(cnt), 2, 2)
		boxfa x , y, x + masx, y + masy
	loop
	
	return
	
#modfunc 碁盤に矩形データを表示 array rects

	
		x1 = px + rects(0) * masx
		y1 = py + rects(1) * masy
		x2 = px + rects(2) * masx
		y2 = py + rects(3) * masy

		if x1 > x2: tmp = x1:x1 = x2: x2 = tmp
		if y1 > y2: tmp = y1:y1 = y2: y2 = tmp
		
		color 200,200,200
		boxfa x1, y1, x2 + masx, y2 + masy
	

	return
*draw_last_move_mark
	if (zz == 1) && m == 最後の着手 && cnt == 最後の着手.1{
		color 21,220,21
		circle posx + masx/4, posy + masy/4, posx + masx*3/4, posy + masy*3/4
	}
	return
#modfunc getBoardCoordinates array result
	result = (mousex - px) / masx - (mousex < px), (mousey - py) / masy - (mousey < py)
	return

#modfunc get_board_data array a
	dim a,length(board),length2(board)
	repeat length(board): m = cnt
		repeat length2(board)
			a(m,cnt) = board(m,cnt)
		loop
	loop
	return
#modfunc set_board_data array a
	repeat length(a)
		m = cnt
		repeat length2(a)
			board(m,cnt) = a(m,cnt)
		loop
	loop
	return
#modcfunc get_goban_position_color int _x, int _y
	return board(_x,_y)
	
//各モジュールで追加に必要なコードはこれだけ。コピペ推奨
#modfunc local thisrect array mocklist, int area_number_mock
	if mock_flag@global{
		get_rect_mock mockrect //モックから矩形取得
		mocklist(0) = mockrect(0,area_number_mock)
		mocklist(1) = mockrect(1,area_number_mock)
		mocklist(2) = mockrect(2,area_number_mock)
		mocklist(3) = mockrect(3,area_number_mock) 
	}else{
		get_rect area_number_mock, mocklist //グリッドシステムからエリア番号で矩形取得
	}
	return
#deffunc board_module_init int p1
	sx = 1,0,-1,0
	sy = 0,-1,0,1

	hosisizer = p1
	
	if hosisizer == 0: hosisizer = 3
	return

//盤の大きさを受け取り、星の位置のリストを返す
#deffunc get_hosi int boardsizex, int boardsizey, array a , local n
	
	dim a, 2

	if boardsizex == 9 && boardsizey == 9{
		
		a(0,n) = 5,5
		n++

	}

	if boardsizex == 13 && boardsizey == 13{
		
		a(0,n) = 3,3 : n++
		a(0,n) = 9,3 : n++
		a(0,n) = 6,6 : n++
		a(0,n) = 3,9 : n++
		a(0,n) = 9,9 : n++

	
	}

	if boardsizex == 19 && boardsizey == 19{

		a(0,n) = 3,3 : n++
		a(0,n) = 9,3 : n++
		a(0,n) = 15,3 : n++
		a(0,n) = 3,9 : n++
		a(0,n) = 9,9 : n++
		a(0,n) = 15,9 : n++
		a(0,n) = 3,15 : n++
		a(0,n) = 9,15 : n++
		a(0,n) = 15,15 : n++

	}


	return n

#modfunc get_goban_mas_size array a
	a = masx,masy
	return 
#modfunc get_goban_position array a
	a = px, py
	return

#modfunc 置き石 int _x, int _y, int col
	if _x < 0 || _x >= length(board) || _y < 0 || _y >= length2(board) {
		return 0 // 範囲外
	}
	if board(_x, _y) != 空点 {
		return 0 // 既に石がある
	}
	board(_x, _y) = col
	return 1 // 成功
#global
board_module_init
#endif
