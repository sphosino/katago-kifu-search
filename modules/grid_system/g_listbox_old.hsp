#ifndef listbox_item

#include "area_grid_system.hsp"

#addition "../keyfps.hsp"
//アイテム構造体（ロジックは入れない）
dimtype listbox_items@global, 5

#module listbox_item name, selected, data

#defcfunc make_listbox_item str s1
	newmod listbox_items@global,listbox_item, s1 //ここでメモリ確保エラー！！！！！
	return stat
#modinit str s1, local thismod_ID
	data = 0
	name = s1
	mref thismod_ID, 2 //thismodID
	return thismod_ID

#define global ctype listbox_item_get_str(%1) _listbox_item_get_str(listbox_items@global(%1))
#modcfunc _listbox_item_get_str
	return name

#define global toggle_selected_status(%1) _toggle_selected_status listbox_items@global(%1)
#modfunc _toggle_selected_status
	selected ^ 1
	return

#define global ctype get_selected_status(%1) _get_selected_status(listbox_items@global(%1))
#modcfunc _get_selected_status
	return selected

#define global set_listbox_data(%1,%2) _set_listbox_data listbox_items@global(%1), %2
#modfunc _set_listbox_data var v
	data = v
	return

#define global ctype get_listbox_data(%1) _get_listbox_data(listbox_items@global(%1))
#modcfunc _get_listbox_data
	return data

#define global del_listbox_item(%1) delmod listbox_items@global(%1)
	
#global

//-------------------------------------------------------------------------------------------------------

#module grid_listbox listbox_items, item_num, area_number, px,py,sx,sy, item_y, current_scroll_index, bar_posx, bar_posy, bar_height, bar_width, scrollbar_x, colors

#const DEFAULT_ITEM_Y_SIZE 30
#const DEFAULT_SCROLLBAR_X 10


#modinit int p1, local thimod_ID

	area_number = p1

	thisrect thismod, r, area_number

	item_y = DEFAULT_ITEM_Y_SIZE
	scrollbar_x = DEFAULT_SCROLLBAR_X

	current_scroll_index = 0
	dim listbox_items
	item_num = 0

	mref thismod_ID, 2
	return thismod_ID

#modfunc add_item str s1, local i
	ss = s1
	
	notesel ss
	
	repeat notemax
		noteget i, cnt
		listbox_items(item_num) = make_listbox_item(i)
		item_num++
	loop
	
	noteunsel
	
	return

#modfunc add_item_data int p1, var d
	set_listbox_data listbox_items(p1), d
	return

#modfunc del_item_by_id int p1
	del_listbox_item listbox_items.p1
	item_num--
	//空いた要素を詰める
	memcpy listbox_items,listbox_items,(item_num - p1)*4, p1*4, p1*4+4
	return
	
#modcfunc get_name_all_items
	ss = ""
	repeat item_num
		ss += listbox_item_get_str(listbox_items(cnt)) + "\n"
	loop
	return ss
	
#modfunc del_item_by_str str s1
	repeat item_num
		if listbox_item_get_str(listbox_items.cnt) == s1{
			del_item_by_id thismod, cnt
			break
		}
	loop
	return

#modfunc del_item_all
	repeat item_num
		del_item_by_id thismod, cnt
	loop
	item_num = 0
	scroll_top thismod
	return
	
#modfunc set_scroll_index int p1
	current_scroll_index = limit(p1, 0, limit(item_num - sy/item_y,0))
	logmes "" + p1 + ": "+current_scroll_index
	return

#modfunc move_scroll_index int p1

	set_scroll_index thismod, current_scroll_index + p1

	return

#modfunc scroll_top
	set_scroll_index thismod, 0
	return

#modfunc scroll_end
	thisrect thismod, r, area_number
	sy = r.3-r.1
	set_scroll_index thismod, item_num
	
	return

#modcfunc get_scroll_index
	return current_scroll_index

#modfunc set_listbox_item_Ysize int p1
	item_y = p1
	return
	
#modfunc set_listbox_scollbar_width int p1
	scrollbar_x = p1
	return

#modfunc my_listbox_draw

	色を設定 $F5F5DC

	thisrect thismod, rect, area_number
	px = rect
	py = rect.1
	sx = rect.2 - px
	sy = rect.3 - py
	max_visible_items = sy / item_y

	sy = max_visible_items * item_y

	boxf px, py, px + sx, py + sy

	//アイテム描画
	font "",item_y
	
	repeat item_num - current_scroll_index
		if  cnt >= max_visible_items: break
				
		//アイテム描画
		ypos = py + item_y * cnt
		if get_selected_status(listbox_items(current_scroll_index + cnt)){
			色を設定 $4A90E2
		}else{
			color 0, 100,0
		}
		boxf px, ypos, px + sx - bar_width, ypos + item_y
		pos px + 5, ypos
		色を設定 $F5F5DC
		mes listbox_item_get_str(listbox_items(current_scroll_index + cnt))
	loop
	
	//スクロールバー描画
	if max_visible_items < item_num{

		bar_width = scrollbar_x
		bar_height = limit(sy / (item_num - max_visible_items + 1),5)
		bar_posx = px + sx - bar_width
		
		//１スクロール単位の移動量は、(スクロールバーの稼働域) / (オーバーフローしている数)
		//それを実際のスクロールされている量で掛ける。
		//誤差を減らすため掛け算が先
		bar_posy = py + (sy - bar_height) * current_scroll_index / (item_num - max_visible_items)
		
		color 255
		boxf bar_posx, bar_posy, bar_posx + bar_width, bar_posy + bar_height
	}else{
		bar_width = -1
	}

	return
	
#modfunc set_current_scroll_index_by_bar_position int y, local scroll_range, local bar_relative_pos, local index
	// スクロールバーが移動可能な範囲を計算
	scroll_range = sy - bar_height
	if scroll_range <= 0 {
		// スクロール可能な範囲がない場合は、何もせず終了
		return
	}
	
	// 渡された y をスクロールバー領域内の相対位置に変換
	bar_relative_pos = limit(y - py, 0, scroll_range)
	
	// 相対位置からスクロールインデックスを計算
	index = bar_relative_pos * (item_num - sy / item_y) / scroll_range
	
	// インデックスを設定
	set_scroll_index thismod, index
	return
	
#modcfunc listbox_on_id int x, int y, local i
	
	if px > x || py > y || px + sx < x || py + sy < y{
		 //リストボックス外
		return -1
	}
	if x >= px + sx - bar_width{
		//スクロールエリア
		if y >= bar_posy && y <= bar_posy + bar_height{
			//スクロールバーのつまみ
			return -2
		}
		return -3
	}
	//アイテムエリア内
	i = (y - py ) / item_y + current_scroll_index
	if i >= item_num{
		//アイテム上ではない
		return -4
	}
	
	return i //アイテムの番号

#modfunc check_item int p1, int single_select
	if single_select{
		repeat item_num
			//すべて選択解除
			if get_selected_status(listbox_items(cnt)){
				toggle_selected_status listbox_items(cnt)
			}
		loop
	}
	toggle_selected_status listbox_items(p1)
	return
    
#modcfunc is_item_visible int item_id, local start_index, local end_index
    start_index = current_scroll_index
    end_index = current_scroll_index + (sy / item_y) - 1
    return (item_id >= start_index && item_id <= end_index)
    
#modfunc scroll_item_to_top int item_id, local target_index
    target_index = limit(item_id, 0, item_num - 1)
    set_scroll_index thismod, target_index
    return
    
#modfunc scroll_item_to_bottom int item_id, local target_index
    target_index = limit(item_id, 0, item_num - 1)
    set_scroll_index thismod, target_index - (sy / item_y) + 1
    return

#modcfunc get_name_item int p1
	return listbox_item_get_str(listbox_items(p1))

#modcfunc get_selected_items array a, local i
	dim a
	repeat item_num
		if get_selected_status(listbox_items(cnt)){
			a.i = cnt
			i++
		}
	loop
	return i
#modcfunc get_selected_status_ int p1
	return get_selected_status(listbox_items(p1))
#modcfunc get_item_num
	return item_num
#modcfunc get_listbox_item_data int p1
	return int(get_listbox_data(listbox_items(p1)))
#include "rectmock.hsp"
#global
#endif


#if 0


mock_flag@global = 1
set_rect_mock 0, 100,100,300,200

newmod a, grid_listbox, 0

add_item a,"A\nB\nC\nD\nE\nF\nG\nH\nI\nJ"

scroll_end a
set_listbox_scollbar_width a, 5

repeat
	manage_keyfps
	mw = mousew
	if mw > 0: move_scroll_index a, -1
	if mw < 0: move_scroll_index a, 1

	color 0,0,0
	boxf
	my_listbox_draw a

	
	s = ""
	repeat get_selected_items(a,result)
		s += "" + result.cnt + ","
	loop

	title""+listbox_on_id(a,mousex,mousey) +"--"+ s
	
	if _getkey(1) >= 1{

		if _getkey(1) == 1 && listbox_on_id(a,mousex,mousey) >= 0{
			check_item a,stat
		}
		

		if listbox_on_id(a,mousex,mousey) == -3{
			set_current_scroll_index_by_bar_position a,mousey
		}
	}

	redraw : redraw 2
loop

#endif

#if 0
	//大量オブジェクトテスト
	mock_flag@global = 1
	set_rect_mock 0, 100,100,300,200
	newmod a, grid_listbox, 0
	repeat 10000
	add_item a,"A\nB\nC\nD\nE\nF\nG\nH\nI\nJ\nK"
	loop

repeat
	manage_keyfps
	mw = mousew
	if mw > 0: move_scroll_index a, -1
	if mw < 0: move_scroll_index a, 1

	color 0,0,0
	boxf
	my_listbox_draw a

	
	s = ""
	repeat get_selected_items(a,result)
		s += "" + result.cnt + ","
	loop

	title""+listbox_on_id(a,mousex,mousey) +"--"+ s
	
	if _getkey(1) >= 1{

		if _getkey(1) == 1 && listbox_on_id(a,mousex,mousey) >= 0{
			check_item a,stat
		}
		

		if listbox_on_id(a,mousex,mousey) == -3{
			set_current_scroll_index_by_bar_position a,mousey
		}
	}

	redraw : redraw 2
loop

#endif