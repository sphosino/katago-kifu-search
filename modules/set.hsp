#ifndef set_str
#module set_str data, hashcount, hashtable, data_deleted_list, data_deleted_list_num, データ数, valid_buckets, valid_buckets_num

#const MAX_KEYS 666667
#const FNV_PRIME 73091
#const SEED 72889
    
#defcfunc local get_hash str s1

    s = SEED
    t = s1
    repeat strlen(t)
        s ^= peek(t, cnt) 
        s *= FNV_PRIME 
    loop
    return (s & 0x7FFFFFFF) \ MAX_KEYS
    
#modinit 

	sdim data
	dim hashcount, MAX_KEYS
	dim hashtable, MAX_KEYS, 3 //(自動的に拡張される）
	dim data_deleted_list, MAX_KEYS
	dim data_deleted_list_num
	dim valid_buckets, MAX_KEYS
	dim valid_buckets_num

	mref thismod_ID, 2
	return thismod_ID

#modfunc set_push str s1

	hash = get_hash(s1)

	for i,, hashcount(hash)
		if data(hashtable(hash, i)) == s1{
			return 1
		}
	next

	if data_deleted_list_num{
		data_deleted_list_num--
		newid = data_deleted_list(data_deleted_list_num)
	}else{
		newid = データ数
	}

	if hashcount(hash) == 0{
		valid_buckets(valid_buckets_num) = hash
		valid_buckets_num++
	}
		
	
	data(newid) = s1
	hashtable(hash, hashcount(hash)) = newid
	hashcount(hash)++
	
	データ数++

	return 1

#modcfunc is_in_set str s1

	hash = get_hash(s1)
	
	for i,,hashcount(hash)
		if data(hashtable(hash, i)) == s1{
			return 1
		}
	next

	return 0

#modfunc set_del str s1

	hash = get_hash(s1)
	
	for i,, hashcount(hash)
	
		dup id, hashtable(hash, i)
		
		if data(id) == s1{
			
			data_deleted_list(data_deleted_list_num) = id
			data_deleted_list_num++

			hashcount(hash)--
			id = hashtable(hash, hashcount(hash))

			if hashcount(hash) == 0{
				repeat valid_buckets_num
					if valid_buckets(cnt) == hash{
						valid_buckets_num--
						valid_buckets(cnt) = valid_buckets(valid_buckets_num)
						break
					}
				loop
			}

			データ数--
			
			return
		}
	next


#modcfunc set_get_all array result

	sdim result
	rn = 0
	repeat valid_buckets_num
		m = cnt
		repeat hashcount(valid_buckets(m))
			result(rn) = data(hashtable(valid_buckets(m), cnt))
			rn++
		loop
	loop

	return rn

#modcfunc get_cardinality
	count = 0
	repeat valid_bucketes_num
		count += hashcount(valid_buckets(cnt))
	loop
	return count
#global


/////////////////////////////////////////////////////////////////////////////

#module set_manager

//新たな空のセットを作成
#defcfunc make_new_set
	newmod data, set_str
	return stat ;セットのIDを返す。

//セットに要素追加
#deffunc push_data int setID, str key

	set_push data(setID), key

	return

//セットの要素削除
#deffunc del_data int setID, str key

	set_del data(setID), key
	return

#defcfunc is_inset int setID, str s1
	return is_in_set(data(setID),s1)

#deffunc del_set int setID
	delmod data(setID)
	return


//セットの全データ取得
#defcfunc set_to_array int setID, array a
	return set_get_all(data(setID), a)

// セット同士の足し算
#defcfunc set_plus_set int setID, int setID2

    // 新しいセットを作成
    newSetID = make_new_set()

    // 1つ目のセットのデータを取得して追加
    
    repeat set_to_array(setID, tmp)
        push_data newSetID, tmp(cnt)
    loop

    // 2つ目のセットのデータを取得して追加
    
    repeat set_to_array(setID2, tmp)
        push_data newSetID, tmp(cnt)
    loop

    return newSetID ; 新しいセットIDを返す
    
#defcfunc set_minus_set int setID, int setID2

    // 新しいセットを作成
    newSetID = make_new_set()

    // 1つ目のセットのデータを取得
    // `setB` に存在しない要素だけを新セットに追加
    repeat set_to_array(setID, tmp)
        if is_in_set(data(setID2), tmp(cnt)) == 0{
	        push_data newSetID, tmp(cnt)
        }
    loop

    return newSetID ; 新しいセットIDを返す

#defcfunc set_and_set int setID, int setID2

    // 新しいセットを作成
    newSetID = make_new_set()

    // `setA` のデータを取得
    // `setB` にも存在するデータのみ追加
    repeat set_to_array(setID, tmp)
        if is_in_set(data(setID2), tmp(cnt)){
            push_data newSetID, tmp(cnt)
       	}
    loop

    return newSetID ; 新しいセットIDを返す

#defcfunc set_sym_diff int setID, int setID2
    newSetID = make_new_set()

    // `setA - setB`

    repeat set_to_array(setID, tmpA)
        if is_in_set(data(setID2), tmpA(cnt)) == 0{
            push_data newSetID, tmpA(cnt)
        }
    loop

    // `setB - setA`
    
    repeat set_to_array(setID2, tmpB)
        if is_in_set(data(setID), tmpB(cnt)) == 0{
            push_data newSetID, tmpB(cnt)
        }
    loop

    return newSetID

#defcfunc is_subset int setID, int setID2

    n = set_to_array(setID, tmp)
    for i,, n
        if is_in_set(data(setID2), tmp(i)) == 0{
	        return 0
        }
    next
	return 1

#defcfunc is_proper_subset int setID, int setID2
	if get_cardinality(data(setID)) >= get_cardinality(data(setID2)): return 0
	return is_subset(setID, setID2)


#defcfunc notepad_minus_notepad var s, str s2
	newSetID = notepad_to_set(s2)
	notesel s
		result = ""
	    repeat notemax
	    	noteget tmp, cnt
	        if is_in_set(data(newSetID), tmp) == 0{
		        result += tmp + "\n"
	        }
	    loop
	noteunsel
	del_set newSetID
    return strmid(result, 0, strlen(result) - 2)
    
//---------------------------

#defcfunc array_to_set array a
	newSetId = make_new_set()
	repeat length(a)
		push_data newSetId, a(cnt)
	loop
	return newSetId

#defcfunc notepad_to_set str s1
	newSetId = make_new_set()
	s = s1
	notesel s
		repeat notemax
			noteget tmp,cnt
			push_data newSetId, tmp
		loop
	noteunsel
	return newSetId

#defcfunc set_to_notepad int setID
	s = ""
	repeat set_to_array(setID,tmp)
		s += tmp(cnt) + "\n" 
	loop
	return strmid(s,0,strlen(s)-2)
	
#global


#module
#defcfunc array_to_notepad array a

	s = ""
	repeat length(a)
		s += a.cnt
		if cnt != 0: s += "\n"
	loop
	
	return s
#defcfunc notepad_to_array str s1, array a
	s = s1
	notesel s
		sdim a
		repeat notemax
			noteget tmp, cnt
			a(cnt) = tmp
		loop
	noteunsel
	return length(a)
#global
#endif


#if 0
#undef mes
#define mes(%1) mes@hsp %1:logmes %1:
a = make_new_set()
b = make_new_set()
c = make_new_set()

push_data a,"A"
push_data a,"B"

push_data b,"B"
push_data b,"C"

push_data c, "C"

//足し算
result = set_plus_set(a, b)
repeat set_to_array(result, f)
	mes f.cnt
loop
mes
//引き算
result = set_minus_set(a, b)
repeat set_to_array(result, f)
	mes f.cnt
loop
mes

//AND
result = set_and_set(a, b)
repeat set_to_array(result, f)
	mes f.cnt
loop
mes

//差
result = set_sym_diff(a,c)
repeat set_to_array(result, f)
	mes f.cnt
loop
mes 

mes is_subset(b,a)
mes is_subset(c,b)
mes is_subset(c,a)

#endif

/* 出力

A
B
C

A

B

A
B
C

0
1
0

*/