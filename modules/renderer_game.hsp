//renderer-game2.hsp"
#include "renderer.hsp"
#include "../../common/keyfps.hsp"
// まずバッファに画像読み込み
buffer 20  // 空いてるバッファ番号
picload "koma.bmp", 1
gsel 0
randomize

// プレイヤー情報
player_x = 100.
player_y = 300.
player_sizex = 30.
player_sizey = 30.
player_vx = 0.0
player_vy = 0.0
player_ax = 0.0
jump_power = -250.

init_draw_objects
randomize
delkey_all
addkey 32  // ジャンプキー（スペース）
repeat 4
	addkey 37 + cnt
loop

life = 3

DIRECTION_CHANGE_DAMPENING = 0.9//逆方向選択時の速度の瞬間変動率
REVERSE_MULTIPLIER = 2.0 //逆方向への加速倍率
FRICTON = 0.95 //入力なし時の減速率

// 足場の管理
#enum BLOCK_TYPE_NORMAL = 0  // 乗れるだけ
#enum BLOCK_TYPE_ITEM     // アイテム出す用
#enum BLOCK_TYPE_EMPTY    // 空になったブロック
#enum BLOCK_TYPE_BREAKABLE  // 頭で壊せるブロック

#enum BLOCK_TYPE_MAX

#const MAX_BLOCKS 100
ddim block_x, MAX_BLOCKS
ddim block_y, MAX_BLOCKS
ddim block_vx, MAX_BLOCKS
ddim block_vy, MAX_BLOCKS
ddim block_w, MAX_BLOCKS
ddim block_h, MAX_BLOCKS
ddim block_type, MAX_BLOCKS
newmod blocks_id_manager, id_manager

// アイテムの管理
#const MAX_ITEMS 30
ddim item_x, MAX_ITEMS
ddim item_y, MAX_ITEMS
ddim item_w, MAX_ITEMS
ddim item_h, MAX_ITEMS
ddim item_type, MAX_ITEMS
newmod items_id_manager, id_manager


// --- 敵の管理 ---
#const MAX_ENEMIES 30
ddim enemy_x, MAX_ENEMIES
ddim enemy_y, MAX_ENEMIES
ddim enemy_w, MAX_ENEMIES
ddim enemy_h, MAX_ENEMIES
ddim enemy_vx, MAX_ENEMIES
newmod enemies_id_manager, id_manager


block_colors = $AAAAAA, $FFD700, $FF9999,$B22222

#define ctype sgn(%1) ((%1 > 0) - (%1 < 0))

gosub*init

//
make_draw_object TYPE_RECT, -1, 320, 240, 640, 480, 0, 0, strf("%d", $000000) //背景　-1で永続オブジェクト
bg = stat
set_priority_draw_object bg, PRIORITY_BACK
;*/

setfps 60
*main
    manage_keyfps

    dt = frametime()
    


	make_star 640. - rnd(rnd(640) + 1) //新しい星は右寄りに生成

	// 無敵タイマー管理
	if invincible_timer > 0 {
    	invincible_timer--
	}

    //blockの動きはまだフレームベースだにゃ。
	// プレイヤー位置更新
		//--- 入力処理・加速度の決定 ---

		if gameover >= 0 && _getkey(32) == 1{
			gosub *init
		}

		//--- ジャンプ処理 ---
		if on_ground && _getkey(32) >= 1{
		    player_vy = jump_power 
		}
		
		//--- 滑空処理の条件判定 ---
		if on_ground == 0 && player_vy > 20 && _getkey(38) >= 1 {
		    gliding = 1
		    gravity_now = 100.		    
		    make_draw_object TYPE_STR, 1, player_x, player_y - 30, 0, 0, 0, 0, "メイリオ,20,滑空中〜♪"
		} else {
		    gliding = 0
		    gravity_now = 440.
		}

		moving_right = player_vx > 0
		moving_left = player_vx < 0
		wants_to_go_right = _getkey(39) >= 1
		wants_to_go_left = _getkey(37) >= 1

		changing_direction = (moving_right && wants_to_go_left) || (moving_left && wants_to_go_right)

		ax = accel

		if (changing_direction){
			ax *= REVERSE_MULTIPLIER
			player_vx *= DIRECTION_CHANGE_DAMPENING
		}
		
		if wants_to_go_right{
			player_vx += ax * dt
		}else: if wants_to_go_left{
			player_vx -= ax * dt
		}else{
			player_vx *= FRICTION
		}		
			
		player_vy += gravity_now * dt
		
		//--- 速度から位置を更新 ---
		player_x += player_vx * dt + (block_move * on_ground); block_move はフレーム単位のまま
		player_y += player_vy * dt

		title strf("%f,%d,%d,%d,%d", dt, wants_to_go_right,wants_to_go_left, moving_right, moving_left)

		player_x = limitf(player_x, 0, 640)


		

	    ////// 足場生成
	if rnd(15) == 0 { 
	    id = get_new_id(blocks_id_manager)
	    
	    make_block rnd(4)
	    
	    // ★ 足場作ったらたまに敵も出す！
		if rnd(4) == 0 { ; 25%くらいの確率で敵出す
			make_enemy block_x(id), block_y(id) + block_h(id) / 2 
		}
	}
	
	////// 足場更新

	cc = 0
	foreach_id blocks_id_manager, id
	
	    block_x(id) += block_vx(id) ; 左に動かす
	    make_draw_object TYPE_RECT, 1, block_x(id), block_y(id), block_w(id), block_h(id), 0, 0, strf("%d", block_colors(block_type(id)))
		set_priority_draw_object stat, PRIORITY_NORMAL + (frame_counter() - c) * 1000 + cc // c = init時に取得したカウンタ
		cc++
	    if block_x(id) + block_w(id)/2 < 0 {
	        release_id blocks_id_manager, id
	    }
	foreach_end
	
	// --- 足場判定 ---
	on_ground = 0
	if gameover == -1{
		foreach_id blocks_id_manager, id
			// ブロックとの当たり判定
			if block_y(id) - player_y <= (block_h(id)  + player_sizey) / 2 && (block_y(id) > player_y){
				//ブロックとの距離が接触距離以内かつブロックが下。
				if abs(player_x - block_x(id)) <= (player_sizex + block_w(id)) / 2 {
					//x範囲内にプレイヤーが存在！
					if player_vy >= 0 {
						// 乗った！！プレイヤーを足場の上に止める。
						player_y = block_y(id) - (block_h(id) + player_sizey) / 2
						player_vy = 0.0
		
						// ★ブロックの横移動をプレイヤーにも伝える！
						block_move = block_vx(id)
						on_ground = 1
						break
					}
				}
			}
		foreach_end
	}

	//頭ぶつける判定
	foreach_id blocks_id_manager, id
	    // プレイヤーの頭がブロックの下に到達
	    if player_y - block_y(id) <= (player_sizey + block_h(id)) / 2 && player_y > block_y(id) {
	        if player_x >= block_x(id) && player_x <= block_x(id) + block_w(id) {
	            if player_vy < 0 { // 上向きにジャンプ中
	                // --- 頭ゴツン！！ ---
	                switch block_type(id)

	                case BLOCK_TYPE_NORMAL
	                case BLOCK_TYPE_EMPTY
		                player_vy = 0.0
		                player_y = block_y(id) + (block_h(id) + player_sizey)/2 // 頭をブロックの下に合わせる
					swbreak
		            case BLOCK_TYPE_ITEM
	             		player_vy = 0.0
		                player_y = block_y(id) + (block_h(id) + player_sizey)/2 // 頭をブロックの下に合わせる

						make_item block_x(id), block_y(id)

	                    // ブロックを空にする
	                    block_type(id) = BLOCK_TYPE_EMPTY
		            swbreak
	                case BLOCK_TYPE_BREAKABLE
	                	player_vy = 0.0
	                	release_id blocks_id_manager, id
						make_break_effect block_x(id) + block_w(id)/2, block_y(id) + block_h(id)/2
		            swbreak
		            swend
	            }
	        }
	    }
	foreach_end

	// --- 敵の動きと描画 ---
	foreach_id enemies_id_manager, id
		// 移動
		enemy_x(id) += enemy_vx(id)
	
		// 端で反転
		if enemy_x(id) < 0 or enemy_x(id) > 640 {
			enemy_vx(id) = -enemy_vx(id)
		}
	
		// 敵を描画
		make_draw_object TYPE_RECT, 1, enemy_x(id), enemy_y(id), enemy_w(id), enemy_h(id), 0, 0, strf("%d", $FF0000) ; 赤い敵
	foreach_end

	// --- ジャンプ処理 ---


	// --- 敵との接触判定 ---
	foreach_id enemies_id_manager, id
		// 踏みつけ判定
		if player_vy > 0 {
			if abs(player_y - enemy_y(id)) <= (player_sizey + enemy_h(id)) / 2  && player_y < enemy_y(id) {
				if abs(player_x - enemy_x(id)) < (enemy_w(id) + player_sizex) / 2 {
					release_id enemies_id_manager, id
					player_y = enemy_y(id) - enemy_h(id) / 2 - 1
					player_vy = jump_power * 2 / 3
					invincible_timer = 20 ; 念のため一瞬だけ無敵
					continue
				}
			}
		}
	
		// 横からぶつかり判定
		if invincible_timer <= 0 {
			if abs(player_x - enemy_x(id)) < (player_sizex + enemy_w(id))/2 {
				if abs(player_y - enemy_y(id)) < (player_sizey + enemy_h(id)) / 2 {
					life--
					if life <= 0 {
						gosub *gameover_routine
					}
					invincible_timer = 60
				}
			}
		}
	foreach_end
	
	// --- プレイヤー落下チェック ---
	if player_y > 480 && gameover == -1{
	    life--
	    if life < 0: life = 0
	    if life > 0 {
	        // 復活処理
	      	make_block BLOCK_TYPE_NORMAL
	
	        player_x = block_x(id)
	        player_y = block_y(id) - (block_h(id) + player_sizey) / 2
	        player_vy = 0
	    } else {
	        // ゲームオーバー処理
			gosub*gameover_routine
	    }
	}


	
	//アイテムの動き
	foreach_id items_id_manager, id
	    item_vy(id) += item_gravity(id)
	    item_y(id) += item_vy(id)
	    make_draw_object TYPE_SPRITE, 1, item_x(id), item_y(id), 75,80, 0,0, strf("20,%d,0,75,80,0,0,0", item_type(id)*75)
	
	    ; アイテムが画面外に落ちたら消す
	    if item_y(id) > 480 {
	        release_id items_id_manager, id
	    }
	foreach_end

	//アイテム取得
	foreach_id items_id_manager, id
	    if abs(player_x - item_x(id)) < 20 && abs(player_y - item_y(id)) < 20 {
	        ; アイテム取得処理！
	        life++
	        release_id items_id_manager, id //
	    }
	foreach_end

    // プレイヤー描画
    make_draw_object TYPE_RECT, 1, player_x, player_y, player_sizex, player_sizey, 0, 0, strf("%d", $00FF00)

	// ハートをライフ個ぶんレンダラに渡す
	repeat limit(life,0)
		make_draw_object TYPE_SPRITE, 1, 75 * cnt + 33, 80, 75, 80, 0, 0, "20,0,0,75,80,0,0,0"
	loop

	make_draw_object TYPE_STR, 1, 400, 50, 0, 0, 0, 0, strf("メイリオ,20,fps = %d,%d", getrealfpsf(), $FFFFFF)
	
    update_draw_objects
    draw_objects

    redraw: redraw 2
	goto *main
	
*gameover_routine
	if gameover >= 0: return
	
	make_draw_object TYPE_STR, -1, 320, 240, 640, 480, 0, 0, strf("メイリオ, %d, gameover, %d",30, $FF0000) 
    gameover = stat
    set_priority_draw_object gameover, PRIORITY_FRONT
    
	return


*init

	start_frame = frame_counter()
	
	make_block BLOCK_TYPE_NORMAL

    player_x = block_x(id) + block_w(id) / 2
    player_y = block_y(id) - block_h(id) / 2
    player_vx = 0.
    player_vy = 0.

    accel = 200.

    life = 3
    if gameover >= 0:destroy_draw_object gameover
    gameover = -1
    
    invincible_timer = 30
    
	repeat 100 
		make_star rnd(640) //画面全体に均等配置
	loop

	return

#deffunc make_star int p1
    size = 1 + rnd(2)
    spd = 1 + rnd(2)
    posx = p1
    posy = rnd(480)
    bright = 100 + rnd(155)
    col = $010101 * bright
    make_draw_object TYPE_RECT, (640 - posx) / spd, posx, posy, size, size, -spd, 0, strf("%d", col)

	return

#deffunc make_block int type

    // 1. 復活ブロック作る
    id = get_new_id(blocks_id_manager)
    block_x(id) = 600.
    block_y(id) = 200. + rnd(280) ; 200〜480の範囲で
    block_vx(id) = -4. * 60 * dt 
    block_vy(id) = 0.
    block_w(id) = 80.
    block_h(id) = 20.
    block_type(id) = type
    
	return id

#deffunc make_enemy double px, double py

	eid = get_new_id(enemies_id_manager)
	enemy_x(eid) = px
	enemy_y(eid) = py ; ブロックの上にちょこんと置く
	enemy_vx(eid) = -4.
	enemy_vy(eid) = 0.
	enemy_w(eid) = 20.
	enemy_h(eid) = 20.
	enemy_vx(eid) = -1. + rnd(2)*2 ; -1 or 1 (左右ランダムに動く)
	return

#deffunc make_item double px, double py
	item_id = get_new_id(items_id_manager)
    item_x(item_id) = px
    item_y(item_id) = py
    item_vy(item_id) = -0.9
    item_w(item_id) = 20.
    item_h(item_id) = 20.
    item_gravity(item_id) = 0.2
    item_type(item_id) = rnd(3) // アイテムの種類を指定
	return

#deffunc make_break_effect double x, double y
	repeat 8  // 破片8個出す
		vx = rnd(5) - 2  // -2?+2 のランダム速度
		vy = rnd(5) - 5  // 上向きに飛びやすい
		size = 5 + rnd(5)  // サイズ5?9ピクセル

		make_draw_object TYPE_RECT, 30, x, y, size, size, vx, vy, strf("%d", $FFCC00) ; 黄色っぽい破片
	loop
return