#ifndef id_manager
#module id_manager used_list, used_list_num, open_list, open_list_num, id_position_in_used_list, using_max, len

#const DEFAULT_SIZE 200

#modinit int p1

	if p1 > 0{
		//指定があればそのサイズで初期化
		dim id_position_in_used_list, p1
		dim used_list, p1
		dim open_list, p1
	}else{
		//デフォルトサイズで確保
		dim id_position_in_used_list, DEFAULT_SIZE
		dim used_list, DEFAULT_SIZE
		dim open_list, DEFAULT_SIZE
	}
	len = get_id_length(thismod)
	return

#modcfunc get_new_id
	if open_list_num {
		open_list_num--
		new_id = open_list(open_list_num)
	} else {
		new_id = using_max
		if new_id >= len{ //確保済みサイズを超えたら
			//自動拡張を利用して２倍に
			new_len = len * 2
			id_position_in_used_list(new_len - 1) = 0 
			used_list(new_len - 1) = 0
			open_list(new_len - 1) = 0
			len = new_len
		}
		using_max++ //使用中の最大範囲
	}

	used_list(used_list_num) = new_id
	id_position_in_used_list(new_id) = used_list_num + 1 ; 1スタート
	used_list_num++

	return new_id

#modfunc release_id int id
	if id < 0 || id > using_max: return

	dup idx, id_position_in_used_list(id)
	if idx {
		open_list(open_list_num) = id
		open_list_num++
		used_list_num--
		move_id = used_list(used_list_num)
		used_list(idx - 1) = move_id
		id_position_in_used_list(move_id) = idx
		idx = 0
	}
	return

#modfunc clear_id_manager

	used_list_num = 0
	open_list_num = 0
	using_max = 0
	
	return

#modcfunc is_id_alive int id //生存確認！
	return id_position_in_used_list(id) >= 1

#modcfunc get_used_ids array a
	dim a, used_list_num
	memcpy a, used_list, used_list_num << 2
	return used_list_num

#modcfunc get_using_count //カウントだけほしい時はこれ！
	return used_list_num
#modcfunc get_id_length
	return length(id_position_in_used_list)
	
#global

#define global foreach_id(%1, %2)%tforeach_id repeat get_used_ids(%1,tmp@id_manager): %2 = tmp@id_manager(cnt)
#define global foreach_end %tforeach_id loop
#endif

//マクロテスト
#if 0
newmod a,id_manager

e = get_new_id(a)
f = get_new_id(a)

foreach_id a,l
	mes l
foreach_end


#endif