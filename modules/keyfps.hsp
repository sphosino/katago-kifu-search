/*
%dll
keyfps

%var
1.01

%date
2025/04/11

%group
入出力制御命令

%*/

//--"keyFPS.hsp"
	#ifndef keyFPS
	#module keyFPS

	#uselib "winmm.dll"
	#cfunc keyFPStimer__ "timeGetTime"
/*
%index
manage_keyfps

%inst
メインループのウェイト、キー取得などを行います
メインループに一つだけ配置してください。

%*/	

#deffunc manage_keyFPS__

	// FPS変更チェック
	if fps != prev_fps {
		prev_fps = fps
		previous_index = frame_table_index

		// 新しいFPSに応じたタイムテーブル作成
		min_deviation = 99999.0
		table_size = limit(fps * FPStime, 1, 65535)
		sdim time_table, table_size
		base_time = 0

		repeat table_size, 1
			frame_time = 1000.0 * cnt / fps
			poke time_table, cnt - 1, base_time + frame_time
			base_time = -int(frame_time)

			if min_deviation > frame_time + base_time {
				min_deviation = frame_time + base_time
				frame_table_index = cnt
			}
		loop

		// テーブルが変化したら記録テーブルも更新
		if previous_index != frame_table_index {
			sdim frame_time_record, frame_table_index
			lpoke frame_counter
			lpoke total_elapsed_time
			ideal_total_time = 1000.0 * frame_table_index
		}
	}

	// 現在のフレームインデックスを取得
	current_frame = frame_counter \ frame_table_index
	frame_counter++

	// FPS調整ウェイト処理
	target_time = last_frame_time + peek(time_table, current_frame)
	time_remaining = target_time - keyFPStimer__()

	await time_remaining - 1

	// 予定時刻になるまで待つ（ループ）
	while keyFPStimer__() < target_time : await: wend

	// 経過時間の計算
	actual_elapsed = limit(stat - last_frame_time, , 255)
	last_frame_time = stat

	// FPS計測
	if frame_counter > frame_table_index {
		total_elapsed_time += actual_elapsed - peek(frame_time_record, current_frame)
		current_fps = ideal_total_time / total_elapsed_time
	} else {
		total_elapsed_time += actual_elapsed
		current_fps = 1000.0 * frame_counter / total_elapsed_time
	}
	poke frame_time_record, current_frame, actual_elapsed

	// キー入力取得
	if ginfo(2) >= 0 {
		repeat max
			dup key_code, keys(cnt)
			dup key_state, count(key_code)
			getkey is_pressed, key_code

			if is_pressed {
				if key_state > 0 {
					key_state++
				} else {
					if flag(key_code) {
						key_state--
					} else {
						key_state = 1
					}
				}
			} else {
				lpoke flag(key_code)
				if key_state > 0 {
					key_state = -1
				} else {
					key_state--
				}
			}
		loop
	} else {
		// キー種別によって処理分岐
		repeat max
			dup key_code, keys(cnt)
			dup key_state, count(key_code)

			if key_state > 0 {
				if type(key_code) = 2 {
					getkey is_pressed, key_code
					if is_pressed {
						key_state++
					} else {
						key_state = -1
						flag(key_code)++
					}
				} else : if type(key_code) = 1 {
					getkey is_pressed, key_code
					if is_pressed{
						key_state++
					}else{
						key_state = -1
					}
				} else {
					key_state = -1
				}
			} else {
				if type(key_code) = 2 {
					key_state--
					getkey is_pressed, key_code
					if is_pressed == 0{
						flag(key_code)++
					}
				} else : if type(key_code) = 1 {
					getkey is_pressed, key_code
					if is_pressed{
						key_state = 1
					}else{
						key_state--
					}
				} else: if type(key_code){
					
				}else{
					key_state--
				}
			}
		loop
	}

	return

/*
%index
setfps

%prm
p1

%inst
目標フレームレート(FPS)を設定します。
少数単位で指定できます。
%href
getrealfps
getrealfpsf

%index
getrealfps

%prm
()

%inst

現在のフレームレート(FPS)
%href
getrealfpsf
setfps

%index
getrealfpsf

%prm
()

%inst

現在のフレームレート(FPS)（少数）
%href
getrealfps
setfps

%index
_getkey

%prm
p1
p1 = 取得するキーコード

%inst
連続で押されている、または押されていないフレーム数が入ります。

押されているとき 1,2,3,4.....
押されていないとき -1,-2,-3,-4....

また、addkeyで追加されていないキーコードを取得しようとした場合は０が返ります。

%sample
#include "keyfps.hsp"

setfps 30

repeat

	manage_keyfps ;　キーの監視とウェイト
	
	redraw 0
	color 250,250,250
	boxf
	color
	pos 0, 0
	if _getkey(1) == 1 : mes "押された瞬間"
	if _getkey(1) >= 5 : mes "5フレーム以上押されている"
	if _getkey(1) == -1: mes "離された瞬間"
	if _getkey(1) < 0  : mes "押されていない"
	redraw
loop



%*/
/*
%index
addkey

%prm
p1, p2

p1 = 監視に追加するキーコード
p2 [0-3] (2) = アクティブ、非アクティブに関する動作

%inst

監視するキーを登録します。

p2で画面が非アクティブになったときの動作を設定します。

	; 0 = 非アクティブ時には検出しない
	; 1 = 非アクティブ時でも検出する
	; 2 = アクティブ→非アクティブ　一旦離すまでは検出する
	;     非アクティブ→アクティブ　一旦離すまでは検出しない
	; 3 = 非アクティブ時は値が変化しない
%*/
	#deffunc addkey__ int p1, int p2
		if count(p1) || p1 <= 0 || p1 >= 256: return
		keys(max) = p1: max+
		type(p1) = p2
		lpoke flag(p1)
		
		if ginfo(2) >= 0 || p2 = 1{
			getkey i, p1
			count(p1) = (i * 2 - 1) << 1
		}else{
			count(p1) = -2
		}
		
		return
/*
%index
delkey

%prm
p1

p1 = 監視から削除するキーコード

%inst

監視するキーを削除します。

%*/	
	#deffunc delkey__ int p1
		repeat max
			if keys(cnt) ! p1: continue 
			lpoke count(p1)
			max-
			keys(cnt) = keys(max)
			break
		loop
		return
/*
%index
getdbl_ms

%prm
(p1, p2)

p1 = ダブルクリックを取得するキーコード
p2(300) = １回目と２回目との間隔(ms)

%inst

p1で指定されたキーコードのダブルクリックを検出します。

ダブルクリックされたフレームは1
それ以外は0が返ります。

p2で間隔を指定します。この時間以内に２回目が押されると、１を返します。
この時間を過ぎると１回目の入力がキャンセルされます。


%*/		
#defcfunc getdbl_ms__ int id, int interval
	// フレーム開始時刻で同じIDがすでに評価されていれば結果を返す
	if last_processed_frame(id) = last_frame_time : return peek(dbl_result, id)

	// 初回クリック時の処理
	if count(id) == 1 {
		last_processed_frame(id) = last_frame_time
		if last_frame_time - dbl_time(id) <= interval {
			lpoke dbl_time(id)
			poke dbl_result, id, 1
			return 1	// ダブルクリック判定
		}
		dbl_time(id) = last_frame_time	// 時間更新
	}

	// ダブルクリックでない場合
	poke dbl_result, id, 0
	return 0
		
	#defcfunc getPhold__ int id, int delay, int repeat_interval
		if count(id) = 1: return 1
	#defcfunc gethold__ int id, int delay, int repeat_interval
		if count(id) < delay: return 0
		if repeat_interval: if (count(id) - delay) \ repeat_interval: return 0
		return 1
		
	#deffunc init_keyFPS
		dim count, 256
		dim last_processed_frame, 256
		dim dbl_time, 256
		sdim dbl_result, 256
		FPStime = 5
		fps = 60.
		last_frame_time = keyFPStimer__()
		return
		
	#global
	init_keyFPS
		
	//以下インターフェース ( このモジュールで使用可能になる全ての機能です )
		
	#define global       manage_keyFPS                   manage_keyFPS__ ; キーの取得とFPSの管理を行う
		
	#define global ctype ms_to_frame(%1)                 (%1 * fps@keyFPS / 1000) ; 現在のFPSにおいての ミリ秒→フレーム数を算出
	#define global ctype frame_to_ms(%1)                 (1000 * %1 / fps@keyFPS) ; 現在のFPSにおいての フレーム数→ミリ秒を算出
		
	//FPS関連
	#define global       setfps(%1)                      fps@keyFPS = limitf(%1, 3.92157, 360); 目標FPSを設定する
	#define global ctype getfps                          fps@keyFPS ; 目標FPS
	#define global ctype getrealfpsf                     current_fps@keyFPS ; 実現FPS
	#define global ctype getrealfps                      int(current_fps@keyFPS + 0.5) ; 実現FPS(整数)
	
	#define global       setFPStime(%1 = FPStime@keyFPS) FPStime@keyFPS = limitf(%1, 0.1): dim prefps@keyFPS ; FPS精度を設定
	#define global ctype getFPStime                      FPStime@keyFPS ; FPS精度
	
	#define global ctype slowdown                        (time_remaining@keyFPS <= 0) ; 処理落ちしているかどうか
	#define global ctype frametime                       ((0. + actual_elapsed@keyFPS) / 1000) ; 前回のフレームにかかった時間(秒)
		
	//キー状態取得関連
	#define global ctype _getkey(%1)                     count@keyFPS(%1) ; キーの状態取得
	//A宗向け(ms単位)
	#define global ctype getdbl_ms(%1, %2 = 300)         getdbl_ms__(%1, %2) ; Double_Click
	#define global ctype gethold_ms(%1, %2 = 0, %3 = 0)  gethold__(%1, ms_to_frame(%2), ms_to_frame(%3)) ; Hold
	#define global ctype getPhold_ms(%1, %2 = 0, %3 = 0) getPhold__(%1, ms_to_frame(%2), ms_to_frame(%3)) ; Press & hold
	//B宗向け(フレーム単位)
	#define global ctype getdbl(%1, %2 = 0)              getdbl_ms__(%1, frame_to_ms(%2)) ; Double_Click
	#define global ctype gethold(%1, %2 = 0, %3 = 0)     gethold__(%1, %2, %3) ; Hold
	#define global ctype getPhold(%1, %2 = 0, %3 = 0)    getPhold__(%1, %2, %3) ; Press & Hold
		
	//監視キー関連
	#define global       addkey(%1, %2 = 2)              addkey__ %1, %2 ; 指定したキーを登録、%2 = 非アクティブ時の動作
	#define global       delkey(%1)                      delkey__ %1     ; 指定したキーを削除
	#define global       addkey_all(%1 = 2)              repeat 255, 1: addkey__ cnt, %1: loop ; 全てのキー登録
	#define global       delkey_all                      repeat 255, 1: delkey__ cnt    : loop ; 全てのキーを削除
		
	#define global       setkey_type(%1, %2)             type@keyFPS(%1) = %2 ; 非アクティブ時の動作設定を行う
	#define global ctype getkey_type(%1)                 type@keyFPS(%1)      ; 非アクティブ時の動作設定を取得
		
	#define global keyFPStime                     keyFPStimer__@keyFPS() ; Windows が起動してからの経過時間 ( timeGettime )

	#define global ctype frame_counter frame_counter@keyfps

/*
%index
slowdown

%prm
()
%inst

フレームが処理落ちしているときは１、
時間内に処理が完了しているときは０が帰ります
%href

%index
addkey_all

%prm
p1 [0-3](2)

%inst

全てのキーコードを監視します。
p1で非アクティブ時の動作を設定します。
詳しくはaddkeyの項目を確認してください
%href
addkey


%index
delkey_all

%inst

全てのキーコードを監視から削除します。
%href
delkey
%*/	
	addkey_all
	
	#endif
//--"keyFPS.hsp" --End Of File
