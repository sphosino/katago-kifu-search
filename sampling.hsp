

#module
// 楕円をポリゴンとして生成
#deffunc makeEllipsePolygon array posX, array posY, double cx, double cy, double rx, double ry, double angle, int num
	// 頂点格納用配列
	dim posX, num
	dim posY, num
    radStep = 6.28318 / num ; ← 2π / num
    repeat num
        rad = radstep*cnt
        x = cos(rad) * rx
        y = sin(rad) * ry

        // 回転
        x2 = x * cos(angle) - y * sin(angle)
        y2 = x * sin(angle) + y * cos(angle)

        // 中心に移動
        posX(cnt) = cx + x2
        posY(cnt) = cy + y2
    loop
    return

// 点が多角形内にあるか判定（射線法）
#defcfunc isPointInPolygon array vx, array vy, int num, double px, double py
    c = 0
    repeat num
        j = (cnt - 1 + num) \ num
        if ((vy(cnt) > py) != (vy(j) > py)) {
            atX = (vx(j) - vx(cnt)) * (py - vy(cnt)) / (vy(j) - vy(cnt)) + vx(cnt)
            if (px < atX) : c ^= 1
        }
    loop
    return c
#global
// メインループ


#const global VERTEX_NUM  20        // 多角形の頂点数（滑らかさ）

// 楕円のパラメータ
ellipse_cx = 320
ellipse_cy = 240
ellipse_rx = 150
ellipse_ry = 80
ellipse_angle = 0.5   // ラジアン（＝約28度）

makeEllipsePolygon posX, posY, ellipse_cx, ellipse_cy, ellipse_rx, ellipse_ry, ellipse_angle, VERTEX_NUM

repeat
	
    redraw 0
	color 100,100,100:boxf
    // ポリゴン描画
    color 0, 0, 255
    repeat VERTEX_NUM
        i = cnt
        j = (cnt + 1) \ VERTEX_NUM
        line posX(i), posY(i), posX(j), posY(j)
    loop

    // マウスカーソル
    mx = mousex
    my = mousey
    color 255, 0, 0
    circle mx - 3, my - 3, mx + 3, my + 3


    hit = isPointInPolygon(posX, posY, VERTEX_NUM, mx, my)
    if hit : title "当たり！" : else : title "はずれ！"
    
    redraw
	await 16 
loop
